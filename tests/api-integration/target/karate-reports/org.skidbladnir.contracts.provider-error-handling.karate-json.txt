{"failedCount":30,"prefixedPath":"classpath:org\/skidbladnir\/contracts\/provider-error-handling.feature","packageQualifiedName":"org.skidbladnir.contracts.provider-error-handling","loopIndex":-1,"relativePath":"org\/skidbladnir\/contracts\/provider-error-handling.feature","scenarioResults":[{"sectionIndex":0,"stepResults":[{"result":{"nanos":1239930,"startTime":1744301473690,"endTime":1744301473691,"millis":1.23993,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":1697529,"startTime":1744301473693,"endTime":1744301473695,"millis":1.697529,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":606970,"startTime":1744301473695,"endTime":1744301473696,"millis":0.60697,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":23710425,"startTime":1744301473696,"endTime":1744301473720,"millis":23.710425,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":1631781,"startTime":1744301473720,"endTime":1744301473722,"millis":1.631781,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":1581625,"startTime":1744301473722,"endTime":1744301473724,"millis":1.581625,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":1526728,"startTime":1744301473723,"endTime":1744301473725,"millis":1.526728,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":1214397,"startTime":1744301473725,"endTime":1744301473726,"millis":1.214397,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":1567947,"startTime":1744301473726,"endTime":1744301473728,"millis":1.567947,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":2908917,"startTime":1744301473728,"endTime":1744301473731,"millis":2.908917,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":1721969,"startTime":1744301473731,"endTime":1744301473733,"millis":1.721969,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":1792095,"startTime":1744301473733,"endTime":1744301473735,"millis":1.792095,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":1477302,"startTime":1744301473735,"endTime":1744301473736,"millis":1.477302,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":1220962,"startTime":1744301473736,"endTime":1744301473737,"millis":1.220962,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":3507498,"startTime":1744301473738,"endTime":1744301473742,"millis":3.507498,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":7655526,"startTime":1744301473741,"endTime":1744301473749,"millis":7.655526,"status":"passed"},"step":{"line":227,"prefix":"*","index":0,"text":"def errorConfig = call simulateNotFoundError 'zephyr'"}},{"result":{"nanos":718862,"startTime":1744301473749,"endTime":1744301473750,"millis":0.718862,"status":"passed"},"step":{"line":229,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":3298396,"startTime":1744301473750,"endTime":1744301473753,"millis":3.298396,"status":"passed"},"step":{"line":230,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":1363859,"startTime":1744301473753,"endTime":1744301473754,"millis":1.363859,"status":"passed"},"step":{"line":231,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","startTime":1744301473755,"endTime":1744301473755,"millis":0.0,"status":"failed"},"step":{"line":232,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301473755,"endTime":1744301473755,"millis":0.0,"status":"skipped"},"step":{"line":233,"prefix":"Then","index":5,"text":"status 404"}},{"result":{"nanos":0,"startTime":1744301473755,"endTime":1744301473755,"millis":0.0,"status":"skipped"},"step":{"line":234,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301473755,"endTime":1744301473755,"millis":0.0,"status":"skipped"},"step":{"line":235,"prefix":"And","index":7,"text":"match response.service == 'Zephyr Scale'"}},{"result":{"nanos":0,"startTime":1744301473755,"endTime":1744301473755,"millis":0.0,"status":"skipped"},"step":{"line":236,"prefix":"And","index":8,"text":"match response.error contains 'not found'"}},{"result":{"nanos":0,"startTime":1744301473755,"endTime":1744301473755,"millis":0.0,"status":"skipped"},"step":{"line":237,"prefix":"*","index":9,"text":"eval And match response.code == 'NOT_FOUND'"}}],"line":241,"description":"","durationMillis":60.442718,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","executorName":"main","name":"Zephyr provider error handling - Not Found","startTime":1744301473545,"refId":"[1.1:241]","endTime":1744301473755,"exampleData":{"errorType":"Not Found","simulationFunction":"simulateNotFoundError","expectedStatus":"404","errorPattern":"not found","additionalAssertions":"And match response.code == 'NOT_FOUND'"},"exampleIndex":0},{"sectionIndex":0,"stepResults":[{"result":{"nanos":344248,"startTime":1744301473778,"endTime":1744301473778,"millis":0.344248,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":306221,"startTime":1744301473778,"endTime":1744301473778,"millis":0.306221,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":259166,"startTime":1744301473779,"endTime":1744301473779,"millis":0.259166,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":242842,"startTime":1744301473779,"endTime":1744301473779,"millis":0.242842,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":322179,"startTime":1744301473779,"endTime":1744301473779,"millis":0.322179,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":388658,"startTime":1744301473780,"endTime":1744301473780,"millis":0.388658,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":310325,"startTime":1744301473780,"endTime":1744301473780,"millis":0.310325,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":787347,"startTime":1744301473781,"endTime":1744301473782,"millis":0.787347,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":390390,"startTime":1744301473781,"endTime":1744301473781,"millis":0.39039,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":304215,"startTime":1744301473782,"endTime":1744301473782,"millis":0.304215,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":412095,"startTime":1744301473782,"endTime":1744301473782,"millis":0.412095,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":250412,"startTime":1744301473783,"endTime":1744301473783,"millis":0.250412,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":416471,"startTime":1744301473783,"endTime":1744301473783,"millis":0.416471,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":385467,"startTime":1744301473783,"endTime":1744301473783,"millis":0.385467,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":382183,"startTime":1744301473784,"endTime":1744301473784,"millis":0.382183,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":1485326,"startTime":1744301473784,"endTime":1744301473785,"millis":1.485326,"status":"passed"},"step":{"line":227,"prefix":"*","index":0,"text":"def errorConfig = call simulateValidationError 'zephyr'"}},{"result":{"nanos":186396,"startTime":1744301473786,"endTime":1744301473786,"millis":0.186396,"status":"passed"},"step":{"line":229,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":165239,"startTime":1744301473786,"endTime":1744301473786,"millis":0.165239,"status":"passed"},"step":{"line":230,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":184754,"startTime":1744301473786,"endTime":1744301473786,"millis":0.184754,"status":"passed"},"step":{"line":231,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","startTime":1744301473786,"endTime":1744301473786,"millis":0.0,"status":"failed"},"step":{"line":232,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301473787,"endTime":1744301473787,"millis":0.0,"status":"skipped"},"step":{"line":233,"prefix":"Then","index":5,"text":"status 400"}},{"result":{"nanos":0,"startTime":1744301473787,"endTime":1744301473787,"millis":0.0,"status":"skipped"},"step":{"line":234,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301473787,"endTime":1744301473787,"millis":0.0,"status":"skipped"},"step":{"line":235,"prefix":"And","index":7,"text":"match response.service == 'Zephyr Scale'"}},{"result":{"nanos":0,"startTime":1744301473787,"endTime":1744301473787,"millis":0.0,"status":"skipped"},"step":{"line":236,"prefix":"And","index":8,"text":"match response.error contains 'validation'"}},{"result":{"nanos":0,"startTime":1744301473787,"endTime":1744301473787,"millis":0.0,"status":"skipped"},"step":{"line":237,"prefix":"*","index":9,"text":"eval And match response.details.fields != null"}}],"line":242,"description":"","durationMillis":7.523934,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","executorName":"main","name":"Zephyr provider error handling - Validation","startTime":1744301473774,"refId":"[1.2:242]","endTime":1744301473787,"exampleData":{"errorType":"Validation","simulationFunction":"simulateValidationError","expectedStatus":"400","errorPattern":"validation","additionalAssertions":"And match response.details.fields != null"},"exampleIndex":1},{"sectionIndex":0,"stepResults":[{"result":{"nanos":387928,"startTime":1744301473800,"endTime":1744301473800,"millis":0.387928,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":321905,"startTime":1744301473800,"endTime":1744301473800,"millis":0.321905,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":204269,"startTime":1744301473800,"endTime":1744301473800,"millis":0.204269,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":239013,"startTime":1744301473801,"endTime":1744301473801,"millis":0.239013,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":345251,"startTime":1744301473801,"endTime":1744301473801,"millis":0.345251,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":240289,"startTime":1744301473801,"endTime":1744301473801,"millis":0.240289,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":192049,"startTime":1744301473802,"endTime":1744301473802,"millis":0.192049,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":199436,"startTime":1744301473802,"endTime":1744301473802,"millis":0.199436,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":263726,"startTime":1744301473802,"endTime":1744301473802,"millis":0.263726,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":204542,"startTime":1744301473802,"endTime":1744301473802,"millis":0.204542,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":191775,"startTime":1744301473803,"endTime":1744301473803,"millis":0.191775,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":179556,"startTime":1744301473803,"endTime":1744301473803,"millis":0.179556,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":244393,"startTime":1744301473803,"endTime":1744301473803,"millis":0.244393,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":274213,"startTime":1744301473803,"endTime":1744301473803,"millis":0.274213,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":324094,"startTime":1744301473804,"endTime":1744301473804,"millis":0.324094,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":2604976,"startTime":1744301473804,"endTime":1744301473807,"millis":2.604976,"status":"passed"},"step":{"line":227,"prefix":"*","index":0,"text":"def errorConfig = call simulateAuthError 'zephyr'"}},{"result":{"nanos":243116,"startTime":1744301473807,"endTime":1744301473807,"millis":0.243116,"status":"passed"},"step":{"line":229,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":157214,"startTime":1744301473807,"endTime":1744301473807,"millis":0.157214,"status":"passed"},"step":{"line":230,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":222142,"startTime":1744301473807,"endTime":1744301473807,"millis":0.222142,"status":"passed"},"step":{"line":231,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","startTime":1744301473808,"endTime":1744301473808,"millis":0.0,"status":"failed"},"step":{"line":232,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301473808,"endTime":1744301473808,"millis":0.0,"status":"skipped"},"step":{"line":233,"prefix":"Then","index":5,"text":"status 401"}},{"result":{"nanos":0,"startTime":1744301473808,"endTime":1744301473808,"millis":0.0,"status":"skipped"},"step":{"line":234,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301473808,"endTime":1744301473808,"millis":0.0,"status":"skipped"},"step":{"line":235,"prefix":"And","index":7,"text":"match response.service == 'Zephyr Scale'"}},{"result":{"nanos":0,"startTime":1744301473808,"endTime":1744301473808,"millis":0.0,"status":"skipped"},"step":{"line":236,"prefix":"And","index":8,"text":"match response.error contains 'Authentication'"}},{"result":{"nanos":0,"startTime":1744301473808,"endTime":1744301473808,"millis":0.0,"status":"skipped"},"step":{"line":237,"prefix":"*","index":9,"text":"eval And match response.code == 'UNAUTHORIZED'"}}],"line":243,"description":"","durationMillis":7.039887,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","executorName":"main","name":"Zephyr provider error handling - Authentication","startTime":1744301473795,"refId":"[1.3:243]","endTime":1744301473808,"exampleData":{"errorType":"Authentication","simulationFunction":"simulateAuthError","expectedStatus":"401","errorPattern":"Authentication","additionalAssertions":"And match response.code == 'UNAUTHORIZED'"},"exampleIndex":2},{"sectionIndex":0,"stepResults":[{"result":{"nanos":193599,"startTime":1744301473818,"endTime":1744301473818,"millis":0.193599,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":272480,"startTime":1744301473818,"endTime":1744301473818,"millis":0.27248,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":269745,"startTime":1744301473818,"endTime":1744301473818,"millis":0.269745,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":543957,"startTime":1744301473819,"endTime":1744301473820,"millis":0.543957,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":437628,"startTime":1744301473819,"endTime":1744301473819,"millis":0.437628,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":316617,"startTime":1744301473820,"endTime":1744301473820,"millis":0.316617,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":278681,"startTime":1744301473820,"endTime":1744301473820,"millis":0.278681,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":246855,"startTime":1744301473821,"endTime":1744301473821,"millis":0.246855,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":466992,"startTime":1744301473821,"endTime":1744301473821,"millis":0.466992,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":233815,"startTime":1744301473821,"endTime":1744301473821,"millis":0.233815,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":208919,"startTime":1744301473822,"endTime":1744301473822,"millis":0.208919,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":169160,"startTime":1744301473822,"endTime":1744301473822,"millis":0.16916,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":206366,"startTime":1744301473822,"endTime":1744301473822,"millis":0.206366,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":191502,"startTime":1744301473822,"endTime":1744301473822,"millis":0.191502,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":174723,"startTime":1744301473823,"endTime":1744301473823,"millis":0.174723,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":1047243,"startTime":1744301473823,"endTime":1744301473824,"millis":1.047243,"status":"passed"},"step":{"line":227,"prefix":"*","index":0,"text":"def errorConfig = call simulateAuthorizationError 'zephyr'"}},{"result":{"nanos":183659,"startTime":1744301473824,"endTime":1744301473824,"millis":0.183659,"status":"passed"},"step":{"line":229,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":136240,"startTime":1744301473824,"endTime":1744301473824,"millis":0.13624,"status":"passed"},"step":{"line":230,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":196883,"startTime":1744301473824,"endTime":1744301473824,"millis":0.196883,"status":"passed"},"step":{"line":231,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","startTime":1744301473825,"endTime":1744301473825,"millis":0.0,"status":"failed"},"step":{"line":232,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301473825,"endTime":1744301473825,"millis":0.0,"status":"skipped"},"step":{"line":233,"prefix":"Then","index":5,"text":"status 403"}},{"result":{"nanos":0,"startTime":1744301473825,"endTime":1744301473825,"millis":0.0,"status":"skipped"},"step":{"line":234,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301473825,"endTime":1744301473825,"millis":0.0,"status":"skipped"},"step":{"line":235,"prefix":"And","index":7,"text":"match response.service == 'Zephyr Scale'"}},{"result":{"nanos":0,"startTime":1744301473825,"endTime":1744301473825,"millis":0.0,"status":"skipped"},"step":{"line":236,"prefix":"And","index":8,"text":"match response.error contains 'Permission'"}},{"result":{"nanos":0,"startTime":1744301473825,"endTime":1744301473825,"millis":0.0,"status":"skipped"},"step":{"line":237,"prefix":"*","index":9,"text":"eval And match response.code == 'FORBIDDEN'"}}],"line":244,"description":"","durationMillis":5.775064,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","executorName":"main","name":"Zephyr provider error handling - Authorization","startTime":1744301473814,"refId":"[1.4:244]","endTime":1744301473825,"exampleData":{"errorType":"Authorization","simulationFunction":"simulateAuthorizationError","expectedStatus":"403","errorPattern":"Permission","additionalAssertions":"And match response.code == 'FORBIDDEN'"},"exampleIndex":3},{"sectionIndex":0,"stepResults":[{"result":{"nanos":101223,"startTime":1744301473832,"endTime":1744301473832,"millis":0.101223,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":264455,"startTime":1744301473832,"endTime":1744301473832,"millis":0.264455,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":148734,"startTime":1744301473833,"endTime":1744301473833,"millis":0.148734,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":204634,"startTime":1744301473833,"endTime":1744301473833,"millis":0.204634,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":199436,"startTime":1744301473833,"endTime":1744301473833,"millis":0.199436,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":251506,"startTime":1744301473833,"endTime":1744301473833,"millis":0.251506,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":315523,"startTime":1744301473834,"endTime":1744301473834,"millis":0.315523,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":262631,"startTime":1744301473834,"endTime":1744301473834,"millis":0.262631,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":301206,"startTime":1744301473834,"endTime":1744301473834,"millis":0.301206,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":244302,"startTime":1744301473835,"endTime":1744301473835,"millis":0.244302,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":249135,"startTime":1744301473835,"endTime":1744301473835,"millis":0.249135,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":200256,"startTime":1744301473835,"endTime":1744301473835,"millis":0.200256,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":187216,"startTime":1744301473836,"endTime":1744301473836,"millis":0.187216,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":233724,"startTime":1744301473836,"endTime":1744301473836,"millis":0.233724,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":208099,"startTime":1744301473836,"endTime":1744301473836,"millis":0.208099,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":1721696,"startTime":1744301473836,"endTime":1744301473838,"millis":1.721696,"status":"passed"},"step":{"line":227,"prefix":"*","index":0,"text":"def errorConfig = call simulateServerError 'zephyr'"}},{"result":{"nanos":206457,"startTime":1744301473838,"endTime":1744301473838,"millis":0.206457,"status":"passed"},"step":{"line":229,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":176729,"startTime":1744301473838,"endTime":1744301473838,"millis":0.176729,"status":"passed"},"step":{"line":230,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":264364,"startTime":1744301473839,"endTime":1744301473839,"millis":0.264364,"status":"passed"},"step":{"line":231,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","startTime":1744301473839,"endTime":1744301473839,"millis":0.0,"status":"failed"},"step":{"line":232,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301473839,"endTime":1744301473839,"millis":0.0,"status":"skipped"},"step":{"line":233,"prefix":"Then","index":5,"text":"status 500"}},{"result":{"nanos":0,"startTime":1744301473839,"endTime":1744301473839,"millis":0.0,"status":"skipped"},"step":{"line":234,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301473839,"endTime":1744301473839,"millis":0.0,"status":"skipped"},"step":{"line":235,"prefix":"And","index":7,"text":"match response.service == 'Zephyr Scale'"}},{"result":{"nanos":0,"startTime":1744301473839,"endTime":1744301473839,"millis":0.0,"status":"skipped"},"step":{"line":236,"prefix":"And","index":8,"text":"match response.error contains 'server error'"}},{"result":{"nanos":0,"startTime":1744301473839,"endTime":1744301473839,"millis":0.0,"status":"skipped"},"step":{"line":237,"prefix":"*","index":9,"text":"eval And match response.code == 'SERVER_ERROR'"}}],"line":245,"description":"","durationMillis":5.741326,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","executorName":"main","name":"Zephyr provider error handling - Server Error","startTime":1744301473830,"refId":"[1.5:245]","endTime":1744301473839,"exampleData":{"errorType":"Server Error","simulationFunction":"simulateServerError","expectedStatus":"500","errorPattern":"server error","additionalAssertions":"And match response.code == 'SERVER_ERROR'"},"exampleIndex":4},{"sectionIndex":0,"stepResults":[{"result":{"nanos":111527,"startTime":1744301473848,"endTime":1744301473848,"millis":0.111527,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":279775,"startTime":1744301473848,"endTime":1744301473848,"millis":0.279775,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":243208,"startTime":1744301473848,"endTime":1744301473848,"millis":0.243208,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":826194,"startTime":1744301473849,"endTime":1744301473850,"millis":0.826194,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":751236,"startTime":1744301473850,"endTime":1744301473851,"millis":0.751236,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":852002,"startTime":1744301473851,"endTime":1744301473852,"millis":0.852002,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":484500,"startTime":1744301473852,"endTime":1744301473852,"millis":0.4845,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":294093,"startTime":1744301473852,"endTime":1744301473852,"millis":0.294093,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":202993,"startTime":1744301473853,"endTime":1744301473853,"millis":0.202993,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":172991,"startTime":1744301473853,"endTime":1744301473853,"millis":0.172991,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":154387,"startTime":1744301473853,"endTime":1744301473853,"millis":0.154387,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":173446,"startTime":1744301473853,"endTime":1744301473853,"millis":0.173446,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":151743,"startTime":1744301473853,"endTime":1744301473853,"millis":0.151743,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":158582,"startTime":1744301473854,"endTime":1744301473854,"millis":0.158582,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":207643,"startTime":1744301473854,"endTime":1744301473854,"millis":0.207643,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":716674,"startTime":1744301473854,"endTime":1744301473855,"millis":0.716674,"status":"passed"},"step":{"line":227,"prefix":"*","index":0,"text":"def errorConfig = call simulateRateLimitError 'zephyr'"}},{"result":{"nanos":121102,"startTime":1744301473855,"endTime":1744301473855,"millis":0.121102,"status":"passed"},"step":{"line":229,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":109612,"startTime":1744301473855,"endTime":1744301473855,"millis":0.109612,"status":"passed"},"step":{"line":230,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":190773,"startTime":1744301473855,"endTime":1744301473855,"millis":0.190773,"status":"passed"},"step":{"line":231,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","startTime":1744301473856,"endTime":1744301473856,"millis":0.0,"status":"failed"},"step":{"line":232,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301473856,"endTime":1744301473856,"millis":0.0,"status":"skipped"},"step":{"line":233,"prefix":"Then","index":5,"text":"status 429"}},{"result":{"nanos":0,"startTime":1744301473856,"endTime":1744301473856,"millis":0.0,"status":"skipped"},"step":{"line":234,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301473856,"endTime":1744301473856,"millis":0.0,"status":"skipped"},"step":{"line":235,"prefix":"And","index":7,"text":"match response.service == 'Zephyr Scale'"}},{"result":{"nanos":0,"startTime":1744301473856,"endTime":1744301473856,"millis":0.0,"status":"skipped"},"step":{"line":236,"prefix":"And","index":8,"text":"match response.error contains 'rate limit'"}},{"result":{"nanos":0,"startTime":1744301473856,"endTime":1744301473856,"millis":0.0,"status":"skipped"},"step":{"line":237,"prefix":"*","index":9,"text":"eval And match response.details.retryAfter != null"}}],"line":246,"description":"","durationMillis":6.202481,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","executorName":"main","name":"Zephyr provider error handling - Rate Limit","startTime":1744301473846,"refId":"[1.6:246]","endTime":1744301473856,"exampleData":{"errorType":"Rate Limit","simulationFunction":"simulateRateLimitError","expectedStatus":"429","errorPattern":"rate limit","additionalAssertions":"And match response.details.retryAfter != null"},"exampleIndex":5},{"sectionIndex":0,"stepResults":[{"result":{"nanos":82164,"startTime":1744301473863,"endTime":1744301473863,"millis":0.082164,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":193691,"startTime":1744301473863,"endTime":1744301473863,"millis":0.193691,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":204724,"startTime":1744301473863,"endTime":1744301473863,"millis":0.204724,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":168613,"startTime":1744301473863,"endTime":1744301473863,"millis":0.168613,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":242205,"startTime":1744301473864,"endTime":1744301473864,"millis":0.242205,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":258619,"startTime":1744301473864,"endTime":1744301473864,"millis":0.258619,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":270565,"startTime":1744301473864,"endTime":1744301473864,"millis":0.270565,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":236368,"startTime":1744301473865,"endTime":1744301473865,"millis":0.236368,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":271021,"startTime":1744301473865,"endTime":1744301473865,"millis":0.271021,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":297740,"startTime":1744301473865,"endTime":1744301473865,"millis":0.29774,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":222599,"startTime":1744301473866,"endTime":1744301473866,"millis":0.222599,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":557819,"startTime":1744301473866,"endTime":1744301473867,"millis":0.557819,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":380451,"startTime":1744301473867,"endTime":1744301473867,"millis":0.380451,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":183843,"startTime":1744301473868,"endTime":1744301473868,"millis":0.183843,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":172990,"startTime":1744301473868,"endTime":1744301473868,"millis":0.17299,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":747223,"startTime":1744301473868,"endTime":1744301473869,"millis":0.747223,"status":"passed"},"step":{"line":227,"prefix":"*","index":0,"text":"def errorConfig = call simulateTimeoutError 'zephyr'"}},{"result":{"nanos":170619,"startTime":1744301473869,"endTime":1744301473869,"millis":0.170619,"status":"passed"},"step":{"line":229,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":107332,"startTime":1744301473869,"endTime":1744301473869,"millis":0.107332,"status":"passed"},"step":{"line":230,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":153932,"startTime":1744301473869,"endTime":1744301473869,"millis":0.153932,"status":"passed"},"step":{"line":231,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","startTime":1744301473869,"endTime":1744301473869,"millis":0.0,"status":"failed"},"step":{"line":232,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301473869,"endTime":1744301473869,"millis":0.0,"status":"skipped"},"step":{"line":233,"prefix":"Then","index":5,"text":"status 504"}},{"result":{"nanos":0,"startTime":1744301473869,"endTime":1744301473869,"millis":0.0,"status":"skipped"},"step":{"line":234,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301473869,"endTime":1744301473869,"millis":0.0,"status":"skipped"},"step":{"line":235,"prefix":"And","index":7,"text":"match response.service == 'Zephyr Scale'"}},{"result":{"nanos":0,"startTime":1744301473869,"endTime":1744301473869,"millis":0.0,"status":"skipped"},"step":{"line":236,"prefix":"And","index":8,"text":"match response.error contains 'timeout'"}},{"result":{"nanos":0,"startTime":1744301473869,"endTime":1744301473869,"millis":0.0,"status":"skipped"},"step":{"line":237,"prefix":"*","index":9,"text":"eval And match response.code == 'GATEWAY_TIMEOUT'"}}],"line":247,"description":"","durationMillis":4.922518,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","executorName":"main","name":"Zephyr provider error handling - Timeout","startTime":1744301473861,"refId":"[1.7:247]","endTime":1744301473869,"exampleData":{"errorType":"Timeout","simulationFunction":"simulateTimeoutError","expectedStatus":"504","errorPattern":"timeout","additionalAssertions":"And match response.code == 'GATEWAY_TIMEOUT'"},"exampleIndex":6},{"sectionIndex":0,"stepResults":[{"result":{"nanos":100858,"startTime":1744301473876,"endTime":1744301473876,"millis":0.100858,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":183112,"startTime":1744301473877,"endTime":1744301473877,"millis":0.183112,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":118458,"startTime":1744301473877,"endTime":1744301473877,"millis":0.118458,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":256431,"startTime":1744301473877,"endTime":1744301473877,"millis":0.256431,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":216489,"startTime":1744301473877,"endTime":1744301473877,"millis":0.216489,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":169617,"startTime":1744301473878,"endTime":1744301473878,"millis":0.169617,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":141529,"startTime":1744301473878,"endTime":1744301473878,"millis":0.141529,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":160497,"startTime":1744301473878,"endTime":1744301473878,"millis":0.160497,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":159038,"startTime":1744301473878,"endTime":1744301473878,"millis":0.159038,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":218586,"startTime":1744301473878,"endTime":1744301473878,"millis":0.218586,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":179830,"startTime":1744301473879,"endTime":1744301473879,"millis":0.17983,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":253239,"startTime":1744301473879,"endTime":1744301473879,"millis":0.253239,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":206002,"startTime":1744301473879,"endTime":1744301473879,"millis":0.206002,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":194968,"startTime":1744301473879,"endTime":1744301473879,"millis":0.194968,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":163415,"startTime":1744301473880,"endTime":1744301473880,"millis":0.163415,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":1333584,"startTime":1744301473880,"endTime":1744301473881,"millis":1.333584,"status":"passed"},"step":{"line":227,"prefix":"*","index":0,"text":"def errorConfig = call simulateConflictError 'zephyr'"}},{"result":{"nanos":343883,"startTime":1744301473881,"endTime":1744301473881,"millis":0.343883,"status":"passed"},"step":{"line":229,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":323001,"startTime":1744301473882,"endTime":1744301473882,"millis":0.323001,"status":"passed"},"step":{"line":230,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":487418,"startTime":1744301473882,"endTime":1744301473882,"millis":0.487418,"status":"passed"},"step":{"line":231,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","startTime":1744301473883,"endTime":1744301473883,"millis":0.0,"status":"failed"},"step":{"line":232,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301473883,"endTime":1744301473883,"millis":0.0,"status":"skipped"},"step":{"line":233,"prefix":"Then","index":5,"text":"status 409"}},{"result":{"nanos":0,"startTime":1744301473883,"endTime":1744301473883,"millis":0.0,"status":"skipped"},"step":{"line":234,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301473883,"endTime":1744301473883,"millis":0.0,"status":"skipped"},"step":{"line":235,"prefix":"And","index":7,"text":"match response.service == 'Zephyr Scale'"}},{"result":{"nanos":0,"startTime":1744301473883,"endTime":1744301473883,"millis":0.0,"status":"skipped"},"step":{"line":236,"prefix":"And","index":8,"text":"match response.error contains 'conflict'"}},{"result":{"nanos":0,"startTime":1744301473883,"endTime":1744301473883,"millis":0.0,"status":"skipped"},"step":{"line":237,"prefix":"*","index":9,"text":"eval And match response.code == 'CONFLICT'"}}],"line":248,"description":"","durationMillis":5.209955,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","executorName":"main","name":"Zephyr provider error handling - Conflict","startTime":1744301473875,"refId":"[1.8:248]","endTime":1744301473883,"exampleData":{"errorType":"Conflict","simulationFunction":"simulateConflictError","expectedStatus":"409","errorPattern":"conflict","additionalAssertions":"And match response.code == 'CONFLICT'"},"exampleIndex":7},{"sectionIndex":0,"stepResults":[{"result":{"nanos":106877,"startTime":1744301473890,"endTime":1744301473890,"millis":0.106877,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":169433,"startTime":1744301473890,"endTime":1744301473890,"millis":0.169433,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":119826,"startTime":1744301473891,"endTime":1744301473891,"millis":0.119826,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":153019,"startTime":1744301473891,"endTime":1744301473891,"millis":0.153019,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":182019,"startTime":1744301473891,"endTime":1744301473891,"millis":0.182019,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":145450,"startTime":1744301473891,"endTime":1744301473891,"millis":0.14545,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":133230,"startTime":1744301473891,"endTime":1744301473891,"millis":0.13323,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":133869,"startTime":1744301473891,"endTime":1744301473891,"millis":0.133869,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":137517,"startTime":1744301473892,"endTime":1744301473892,"millis":0.137517,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":139797,"startTime":1744301473892,"endTime":1744301473892,"millis":0.139797,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":128489,"startTime":1744301473892,"endTime":1744301473892,"millis":0.128489,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":200074,"startTime":1744301473892,"endTime":1744301473892,"millis":0.200074,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":167245,"startTime":1744301473892,"endTime":1744301473892,"millis":0.167245,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":194785,"startTime":1744301473893,"endTime":1744301473893,"millis":0.194785,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":140070,"startTime":1744301473893,"endTime":1744301473893,"millis":0.14007,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":904802,"startTime":1744301473893,"endTime":1744301473894,"millis":0.904802,"status":"passed"},"step":{"line":227,"prefix":"*","index":0,"text":"def errorConfig = call simulateUnprocessableEntityError 'zephyr'"}},{"result":{"nanos":180924,"startTime":1744301473894,"endTime":1744301473894,"millis":0.180924,"status":"passed"},"step":{"line":229,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":138794,"startTime":1744301473894,"endTime":1744301473894,"millis":0.138794,"status":"passed"},"step":{"line":230,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":191958,"startTime":1744301473894,"endTime":1744301473894,"millis":0.191958,"status":"passed"},"step":{"line":231,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","startTime":1744301473894,"endTime":1744301473894,"millis":0.0,"status":"failed"},"step":{"line":232,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301473895,"endTime":1744301473895,"millis":0.0,"status":"skipped"},"step":{"line":233,"prefix":"Then","index":5,"text":"status 422"}},{"result":{"nanos":0,"startTime":1744301473895,"endTime":1744301473895,"millis":0.0,"status":"skipped"},"step":{"line":234,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301473895,"endTime":1744301473895,"millis":0.0,"status":"skipped"},"step":{"line":235,"prefix":"And","index":7,"text":"match response.service == 'Zephyr Scale'"}},{"result":{"nanos":0,"startTime":1744301473895,"endTime":1744301473895,"millis":0.0,"status":"skipped"},"step":{"line":236,"prefix":"And","index":8,"text":"match response.error contains 'validation'"}},{"result":{"nanos":0,"startTime":1744301473895,"endTime":1744301473895,"millis":0.0,"status":"skipped"},"step":{"line":237,"prefix":"*","index":9,"text":"eval And match response.code == 'UNPROCESSABLE_ENTITY'"}}],"line":249,"description":"","durationMillis":3.668178,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","executorName":"main","name":"Zephyr provider error handling - Unprocessable Entity","startTime":1744301473889,"refId":"[1.9:249]","endTime":1744301473895,"exampleData":{"errorType":"Unprocessable Entity","simulationFunction":"simulateUnprocessableEntityError","expectedStatus":"422","errorPattern":"validation","additionalAssertions":"And match response.code == 'UNPROCESSABLE_ENTITY'"},"exampleIndex":8},{"sectionIndex":0,"stepResults":[{"result":{"nanos":96572,"startTime":1744301473904,"endTime":1744301473904,"millis":0.096572,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":161500,"startTime":1744301473904,"endTime":1744301473904,"millis":0.1615,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":115722,"startTime":1744301473904,"endTime":1744301473904,"millis":0.115722,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":178644,"startTime":1744301473904,"endTime":1744301473904,"millis":0.178644,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":158674,"startTime":1744301473905,"endTime":1744301473905,"millis":0.158674,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":132045,"startTime":1744301473905,"endTime":1744301473905,"millis":0.132045,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":266461,"startTime":1744301473905,"endTime":1744301473905,"millis":0.266461,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":174905,"startTime":1744301473905,"endTime":1744301473905,"millis":0.174905,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":130860,"startTime":1744301473905,"endTime":1744301473905,"millis":0.13086,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":129948,"startTime":1744301473906,"endTime":1744301473906,"millis":0.129948,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":128215,"startTime":1744301473906,"endTime":1744301473906,"millis":0.128215,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":179009,"startTime":1744301473906,"endTime":1744301473906,"millis":0.179009,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":188037,"startTime":1744301473906,"endTime":1744301473906,"millis":0.188037,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":176456,"startTime":1744301473906,"endTime":1744301473906,"millis":0.176456,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":152928,"startTime":1744301473906,"endTime":1744301473906,"millis":0.152928,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":6056391,"startTime":1744301473907,"endTime":1744301473913,"millis":6.056391,"status":"passed"},"step":{"line":227,"prefix":"*","index":0,"text":"def errorConfig = call simulateBatchOperationError 'zephyr'"}},{"result":{"nanos":306677,"startTime":1744301473913,"endTime":1744301473913,"millis":0.306677,"status":"passed"},"step":{"line":229,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":256612,"startTime":1744301473913,"endTime":1744301473913,"millis":0.256612,"status":"passed"},"step":{"line":230,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":164600,"startTime":1744301473913,"endTime":1744301473913,"millis":0.1646,"status":"passed"},"step":{"line":231,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","startTime":1744301473914,"endTime":1744301473914,"millis":0.0,"status":"failed"},"step":{"line":232,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301473914,"endTime":1744301473914,"millis":0.0,"status":"skipped"},"step":{"line":233,"prefix":"Then","index":5,"text":"status 400"}},{"result":{"nanos":0,"startTime":1744301473914,"endTime":1744301473914,"millis":0.0,"status":"skipped"},"step":{"line":234,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301473914,"endTime":1744301473914,"millis":0.0,"status":"skipped"},"step":{"line":235,"prefix":"And","index":7,"text":"match response.service == 'Zephyr Scale'"}},{"result":{"nanos":0,"startTime":1744301473914,"endTime":1744301473914,"millis":0.0,"status":"skipped"},"step":{"line":236,"prefix":"And","index":8,"text":"match response.error contains 'batch'"}},{"result":{"nanos":0,"startTime":1744301473914,"endTime":1744301473914,"millis":0.0,"status":"skipped"},"step":{"line":237,"prefix":"*","index":9,"text":"eval And match response.details.errors != null"}}],"line":250,"description":"","durationMillis":9.154256,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:232","executorName":"main","name":"Zephyr provider error handling - Batch Operation Errors","startTime":1744301473902,"refId":"[1.10:250]","endTime":1744301473914,"exampleData":{"errorType":"Batch Operation Errors","simulationFunction":"simulateBatchOperationError","expectedStatus":"400","errorPattern":"batch","additionalAssertions":"And match response.details.errors != null"},"exampleIndex":9},{"sectionIndex":1,"stepResults":[{"result":{"nanos":84899,"startTime":1744301473921,"endTime":1744301473921,"millis":0.084899,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":179192,"startTime":1744301473921,"endTime":1744301473921,"millis":0.179192,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":113442,"startTime":1744301473921,"endTime":1744301473921,"millis":0.113442,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":139341,"startTime":1744301473921,"endTime":1744301473921,"millis":0.139341,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":145906,"startTime":1744301473921,"endTime":1744301473921,"millis":0.145906,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":137790,"startTime":1744301473921,"endTime":1744301473921,"millis":0.13779,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":125479,"startTime":1744301473922,"endTime":1744301473922,"millis":0.125479,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":146362,"startTime":1744301473922,"endTime":1744301473922,"millis":0.146362,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":192687,"startTime":1744301473922,"endTime":1744301473922,"millis":0.192687,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":159312,"startTime":1744301473922,"endTime":1744301473922,"millis":0.159312,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":395589,"startTime":1744301473922,"endTime":1744301473922,"millis":0.395589,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":168521,"startTime":1744301473923,"endTime":1744301473923,"millis":0.168521,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":161591,"startTime":1744301473923,"endTime":1744301473923,"millis":0.161591,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":129948,"startTime":1744301473923,"endTime":1744301473923,"millis":0.129948,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":125571,"startTime":1744301473923,"endTime":1744301473923,"millis":0.125571,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":1049705,"startTime":1744301473923,"endTime":1744301473924,"millis":1.049705,"status":"passed"},"step":{"line":254,"prefix":"*","index":0,"text":"def errorConfig = call simulateNotFoundError 'qtest'"}},{"result":{"nanos":126209,"startTime":1744301473924,"endTime":1744301473924,"millis":0.126209,"status":"passed"},"step":{"line":256,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":116998,"startTime":1744301473925,"endTime":1744301473925,"millis":0.116998,"status":"passed"},"step":{"line":257,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":200712,"startTime":1744301473925,"endTime":1744301473925,"millis":0.200712,"status":"passed"},"step":{"line":258,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","startTime":1744301473925,"endTime":1744301473925,"millis":0.0,"status":"failed"},"step":{"line":259,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301473925,"endTime":1744301473925,"millis":0.0,"status":"skipped"},"step":{"line":260,"prefix":"Then","index":5,"text":"status 404"}},{"result":{"nanos":0,"startTime":1744301473925,"endTime":1744301473925,"millis":0.0,"status":"skipped"},"step":{"line":261,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301473925,"endTime":1744301473925,"millis":0.0,"status":"skipped"},"step":{"line":262,"prefix":"And","index":7,"text":"match response.service contains 'qTest'"}},{"result":{"nanos":0,"startTime":1744301473925,"endTime":1744301473925,"millis":0.0,"status":"skipped"},"step":{"line":263,"prefix":"And","index":8,"text":"match response.error contains 'not found'"}},{"result":{"nanos":0,"startTime":1744301473925,"endTime":1744301473925,"millis":0.0,"status":"skipped"},"step":{"line":264,"prefix":"*","index":9,"text":"eval And match response.code == 'NOT_FOUND'"}}],"line":268,"description":"","durationMillis":3.899254,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","executorName":"main","name":"qTest provider error handling - Not Found","startTime":1744301473919,"refId":"[2.1:268]","endTime":1744301473925,"exampleData":{"errorType":"Not Found","simulationFunction":"simulateNotFoundError","expectedStatus":"404","errorPattern":"not found","additionalAssertions":"And match response.code == 'NOT_FOUND'"},"exampleIndex":0},{"sectionIndex":1,"stepResults":[{"result":{"nanos":128397,"startTime":1744301473934,"endTime":1744301473934,"millis":0.128397,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":210926,"startTime":1744301473934,"endTime":1744301473934,"millis":0.210926,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":121923,"startTime":1744301473934,"endTime":1744301473934,"millis":0.121923,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":139614,"startTime":1744301473934,"endTime":1744301473934,"millis":0.139614,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":154661,"startTime":1744301473934,"endTime":1744301473934,"millis":0.154661,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":147457,"startTime":1744301473935,"endTime":1744301473935,"millis":0.147457,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":183568,"startTime":1744301473935,"endTime":1744301473935,"millis":0.183568,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":126209,"startTime":1744301473935,"endTime":1744301473935,"millis":0.126209,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":122470,"startTime":1744301473935,"endTime":1744301473935,"millis":0.12247,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":114810,"startTime":1744301473935,"endTime":1744301473935,"millis":0.11481,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":130859,"startTime":1744301473935,"endTime":1744301473935,"millis":0.130859,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":122835,"startTime":1744301473936,"endTime":1744301473936,"millis":0.122835,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":120099,"startTime":1744301473936,"endTime":1744301473936,"millis":0.120099,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":128398,"startTime":1744301473936,"endTime":1744301473936,"millis":0.128398,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":168795,"startTime":1744301473936,"endTime":1744301473936,"millis":0.168795,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":711659,"startTime":1744301473936,"endTime":1744301473937,"millis":0.711659,"status":"passed"},"step":{"line":254,"prefix":"*","index":0,"text":"def errorConfig = call simulateValidationError 'qtest'"}},{"result":{"nanos":130586,"startTime":1744301473937,"endTime":1744301473937,"millis":0.130586,"status":"passed"},"step":{"line":256,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":180285,"startTime":1744301473937,"endTime":1744301473937,"millis":0.180285,"status":"passed"},"step":{"line":257,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":139614,"startTime":1744301473937,"endTime":1744301473937,"millis":0.139614,"status":"passed"},"step":{"line":258,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","startTime":1744301473937,"endTime":1744301473937,"millis":0.0,"status":"failed"},"step":{"line":259,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301473937,"endTime":1744301473937,"millis":0.0,"status":"skipped"},"step":{"line":260,"prefix":"Then","index":5,"text":"status 400"}},{"result":{"nanos":0,"startTime":1744301473938,"endTime":1744301473938,"millis":0.0,"status":"skipped"},"step":{"line":261,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301473938,"endTime":1744301473938,"millis":0.0,"status":"skipped"},"step":{"line":262,"prefix":"And","index":7,"text":"match response.service contains 'qTest'"}},{"result":{"nanos":0,"startTime":1744301473938,"endTime":1744301473938,"millis":0.0,"status":"skipped"},"step":{"line":263,"prefix":"And","index":8,"text":"match response.error contains 'validation'"}},{"result":{"nanos":0,"startTime":1744301473938,"endTime":1744301473938,"millis":0.0,"status":"skipped"},"step":{"line":264,"prefix":"*","index":9,"text":"eval And match response.details.fields != null"}}],"line":269,"description":"","durationMillis":3.283165,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","executorName":"main","name":"qTest provider error handling - Validation","startTime":1744301473932,"refId":"[2.2:269]","endTime":1744301473938,"exampleData":{"errorType":"Validation","simulationFunction":"simulateValidationError","expectedStatus":"400","errorPattern":"validation","additionalAssertions":"And match response.details.fields != null"},"exampleIndex":1},{"sectionIndex":1,"stepResults":[{"result":{"nanos":97301,"startTime":1744301473945,"endTime":1744301473945,"millis":0.097301,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":179009,"startTime":1744301473945,"endTime":1744301473945,"millis":0.179009,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":120555,"startTime":1744301473945,"endTime":1744301473945,"millis":0.120555,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":142532,"startTime":1744301473945,"endTime":1744301473945,"millis":0.142532,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":149737,"startTime":1744301473945,"endTime":1744301473945,"millis":0.149737,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":124021,"startTime":1744301473945,"endTime":1744301473945,"millis":0.124021,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":116907,"startTime":1744301473945,"endTime":1744301473945,"millis":0.116907,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":124932,"startTime":1744301473946,"endTime":1744301473946,"millis":0.124932,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":150283,"startTime":1744301473946,"endTime":1744301473946,"millis":0.150283,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":149371,"startTime":1744301473946,"endTime":1744301473946,"millis":0.149371,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":119917,"startTime":1744301473946,"endTime":1744301473946,"millis":0.119917,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":131225,"startTime":1744301473946,"endTime":1744301473946,"millis":0.131225,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":118275,"startTime":1744301473946,"endTime":1744301473946,"millis":0.118275,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":123655,"startTime":1744301473947,"endTime":1744301473947,"millis":0.123655,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":128033,"startTime":1744301473947,"endTime":1744301473947,"millis":0.128033,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":822456,"startTime":1744301473947,"endTime":1744301473948,"millis":0.822456,"status":"passed"},"step":{"line":254,"prefix":"*","index":0,"text":"def errorConfig = call simulateAuthError 'qtest'"}},{"result":{"nanos":116816,"startTime":1744301473948,"endTime":1744301473948,"millis":0.116816,"status":"passed"},"step":{"line":256,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":96754,"startTime":1744301473948,"endTime":1744301473948,"millis":0.096754,"status":"passed"},"step":{"line":257,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":142715,"startTime":1744301473948,"endTime":1744301473948,"millis":0.142715,"status":"passed"},"step":{"line":258,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","startTime":1744301473948,"endTime":1744301473948,"millis":0.0,"status":"failed"},"step":{"line":259,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301473948,"endTime":1744301473948,"millis":0.0,"status":"skipped"},"step":{"line":260,"prefix":"Then","index":5,"text":"status 401"}},{"result":{"nanos":0,"startTime":1744301473948,"endTime":1744301473948,"millis":0.0,"status":"skipped"},"step":{"line":261,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301473948,"endTime":1744301473948,"millis":0.0,"status":"skipped"},"step":{"line":262,"prefix":"And","index":7,"text":"match response.service contains 'qTest'"}},{"result":{"nanos":0,"startTime":1744301473948,"endTime":1744301473948,"millis":0.0,"status":"skipped"},"step":{"line":263,"prefix":"And","index":8,"text":"match response.error contains 'Authentication'"}},{"result":{"nanos":0,"startTime":1744301473948,"endTime":1744301473948,"millis":0.0,"status":"skipped"},"step":{"line":264,"prefix":"*","index":9,"text":"eval And match response.code == 'UNAUTHORIZED'"}}],"line":270,"description":"","durationMillis":3.154494,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","executorName":"main","name":"qTest provider error handling - Authentication","startTime":1744301473943,"refId":"[2.3:270]","endTime":1744301473948,"exampleData":{"errorType":"Authentication","simulationFunction":"simulateAuthError","expectedStatus":"401","errorPattern":"Authentication","additionalAssertions":"And match response.code == 'UNAUTHORIZED'"},"exampleIndex":2},{"sectionIndex":1,"stepResults":[{"result":{"nanos":92194,"startTime":1744301473955,"endTime":1744301473955,"millis":0.092194,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":152928,"startTime":1744301473955,"endTime":1744301473955,"millis":0.152928,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":108335,"startTime":1744301473955,"endTime":1744301473955,"millis":0.108335,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":144720,"startTime":1744301473955,"endTime":1744301473955,"millis":0.14472,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":403249,"startTime":1744301473956,"endTime":1744301473956,"millis":0.403249,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":225516,"startTime":1744301473956,"endTime":1744301473956,"millis":0.225516,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":303120,"startTime":1744301473956,"endTime":1744301473956,"millis":0.30312,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":177823,"startTime":1744301473957,"endTime":1744301473957,"millis":0.177823,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":148004,"startTime":1744301473957,"endTime":1744301473957,"millis":0.148004,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":371149,"startTime":1744301473957,"endTime":1744301473957,"millis":0.371149,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":181289,"startTime":1744301473957,"endTime":1744301473957,"millis":0.181289,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":144265,"startTime":1744301473958,"endTime":1744301473958,"millis":0.144265,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":166060,"startTime":1744301473958,"endTime":1744301473958,"millis":0.16606,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":129401,"startTime":1744301473958,"endTime":1744301473958,"millis":0.129401,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":125844,"startTime":1744301473958,"endTime":1744301473958,"millis":0.125844,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":774945,"startTime":1744301473958,"endTime":1744301473959,"millis":0.774945,"status":"passed"},"step":{"line":254,"prefix":"*","index":0,"text":"def errorConfig = call simulateAuthorizationError 'qtest'"}},{"result":{"nanos":128215,"startTime":1744301473959,"endTime":1744301473959,"millis":0.128215,"status":"passed"},"step":{"line":256,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":94566,"startTime":1744301473959,"endTime":1744301473959,"millis":0.094566,"status":"passed"},"step":{"line":257,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":92012,"startTime":1744301473959,"endTime":1744301473959,"millis":0.092012,"status":"passed"},"step":{"line":258,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","startTime":1744301473960,"endTime":1744301473960,"millis":0.0,"status":"failed"},"step":{"line":259,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301473960,"endTime":1744301473960,"millis":0.0,"status":"skipped"},"step":{"line":260,"prefix":"Then","index":5,"text":"status 403"}},{"result":{"nanos":0,"startTime":1744301473960,"endTime":1744301473960,"millis":0.0,"status":"skipped"},"step":{"line":261,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301473960,"endTime":1744301473960,"millis":0.0,"status":"skipped"},"step":{"line":262,"prefix":"And","index":7,"text":"match response.service contains 'qTest'"}},{"result":{"nanos":0,"startTime":1744301473960,"endTime":1744301473960,"millis":0.0,"status":"skipped"},"step":{"line":263,"prefix":"And","index":8,"text":"match response.error contains 'Permission'"}},{"result":{"nanos":0,"startTime":1744301473960,"endTime":1744301473960,"millis":0.0,"status":"skipped"},"step":{"line":264,"prefix":"*","index":9,"text":"eval And match response.code == 'FORBIDDEN'"}}],"line":271,"description":"","durationMillis":3.963635,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","executorName":"main","name":"qTest provider error handling - Authorization","startTime":1744301473953,"refId":"[2.4:271]","endTime":1744301473960,"exampleData":{"errorType":"Authorization","simulationFunction":"simulateAuthorizationError","expectedStatus":"403","errorPattern":"Permission","additionalAssertions":"And match response.code == 'FORBIDDEN'"},"exampleIndex":3},{"sectionIndex":1,"stepResults":[{"result":{"nanos":74503,"startTime":1744301473965,"endTime":1744301473965,"millis":0.074503,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":166789,"startTime":1744301473965,"endTime":1744301473965,"millis":0.166789,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":109156,"startTime":1744301473965,"endTime":1744301473965,"millis":0.109156,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":145998,"startTime":1744301473965,"endTime":1744301473965,"millis":0.145998,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":153110,"startTime":1744301473966,"endTime":1744301473966,"millis":0.15311,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":109156,"startTime":1744301473966,"endTime":1744301473966,"millis":0.109156,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":109430,"startTime":1744301473966,"endTime":1744301473966,"millis":0.10943,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":109977,"startTime":1744301473966,"endTime":1744301473966,"millis":0.109977,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":116543,"startTime":1744301473966,"endTime":1744301473966,"millis":0.116543,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":105873,"startTime":1744301473966,"endTime":1744301473966,"millis":0.105873,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":104414,"startTime":1744301473966,"endTime":1744301473966,"millis":0.104414,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":104323,"startTime":1744301473967,"endTime":1744301473967,"millis":0.104323,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":117911,"startTime":1744301473967,"endTime":1744301473967,"millis":0.117911,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":126756,"startTime":1744301473967,"endTime":1744301473967,"millis":0.126756,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":111072,"startTime":1744301473967,"endTime":1744301473967,"millis":0.111072,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":645819,"startTime":1744301473967,"endTime":1744301473968,"millis":0.645819,"status":"passed"},"step":{"line":254,"prefix":"*","index":0,"text":"def errorConfig = call simulateServerError 'qtest'"}},{"result":{"nanos":103229,"startTime":1744301473968,"endTime":1744301473968,"millis":0.103229,"status":"passed"},"step":{"line":256,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":139249,"startTime":1744301473968,"endTime":1744301473968,"millis":0.139249,"status":"passed"},"step":{"line":257,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":132136,"startTime":1744301473968,"endTime":1744301473968,"millis":0.132136,"status":"passed"},"step":{"line":258,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","startTime":1744301473968,"endTime":1744301473968,"millis":0.0,"status":"failed"},"step":{"line":259,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301473968,"endTime":1744301473968,"millis":0.0,"status":"skipped"},"step":{"line":260,"prefix":"Then","index":5,"text":"status 500"}},{"result":{"nanos":0,"startTime":1744301473968,"endTime":1744301473968,"millis":0.0,"status":"skipped"},"step":{"line":261,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301473968,"endTime":1744301473968,"millis":0.0,"status":"skipped"},"step":{"line":262,"prefix":"And","index":7,"text":"match response.service contains 'qTest'"}},{"result":{"nanos":0,"startTime":1744301473968,"endTime":1744301473968,"millis":0.0,"status":"skipped"},"step":{"line":263,"prefix":"And","index":8,"text":"match response.error contains 'server error'"}},{"result":{"nanos":0,"startTime":1744301473968,"endTime":1744301473968,"millis":0.0,"status":"skipped"},"step":{"line":264,"prefix":"*","index":9,"text":"eval And match response.code == 'SERVER_ERROR'"}}],"line":272,"description":"","durationMillis":2.785444,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","executorName":"main","name":"qTest provider error handling - Server Error","startTime":1744301473964,"refId":"[2.5:272]","endTime":1744301473968,"exampleData":{"errorType":"Server Error","simulationFunction":"simulateServerError","expectedStatus":"500","errorPattern":"server error","additionalAssertions":"And match response.code == 'SERVER_ERROR'"},"exampleIndex":4},{"sectionIndex":1,"stepResults":[{"result":{"nanos":67391,"startTime":1744301473976,"endTime":1744301473976,"millis":0.067391,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":200256,"startTime":1744301473976,"endTime":1744301473976,"millis":0.200256,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":109339,"startTime":1744301473976,"endTime":1744301473976,"millis":0.109339,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":128854,"startTime":1744301473976,"endTime":1744301473976,"millis":0.128854,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":137061,"startTime":1744301473976,"endTime":1744301473976,"millis":0.137061,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":112165,"startTime":1744301473976,"endTime":1744301473976,"millis":0.112165,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":110980,"startTime":1744301473977,"endTime":1744301473977,"millis":0.11098,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":159950,"startTime":1744301473977,"endTime":1744301473977,"millis":0.15995,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":132136,"startTime":1744301473977,"endTime":1744301473977,"millis":0.132136,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":108609,"startTime":1744301473977,"endTime":1744301473977,"millis":0.108609,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":105965,"startTime":1744301473977,"endTime":1744301473977,"millis":0.105965,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":120646,"startTime":1744301473977,"endTime":1744301473977,"millis":0.120646,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":105508,"startTime":1744301473977,"endTime":1744301473977,"millis":0.105508,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":127303,"startTime":1744301473978,"endTime":1744301473978,"millis":0.127303,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":107697,"startTime":1744301473978,"endTime":1744301473978,"millis":0.107697,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":599584,"startTime":1744301473978,"endTime":1744301473979,"millis":0.599584,"status":"passed"},"step":{"line":254,"prefix":"*","index":0,"text":"def errorConfig = call simulateRateLimitError 'qtest'"}},{"result":{"nanos":125297,"startTime":1744301473978,"endTime":1744301473978,"millis":0.125297,"status":"passed"},"step":{"line":256,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":97210,"startTime":1744301473979,"endTime":1744301473979,"millis":0.09721,"status":"passed"},"step":{"line":257,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":125297,"startTime":1744301473979,"endTime":1744301473979,"millis":0.125297,"status":"passed"},"step":{"line":258,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","startTime":1744301473979,"endTime":1744301473979,"millis":0.0,"status":"failed"},"step":{"line":259,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301473979,"endTime":1744301473979,"millis":0.0,"status":"skipped"},"step":{"line":260,"prefix":"Then","index":5,"text":"status 429"}},{"result":{"nanos":0,"startTime":1744301473979,"endTime":1744301473979,"millis":0.0,"status":"skipped"},"step":{"line":261,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301473979,"endTime":1744301473979,"millis":0.0,"status":"skipped"},"step":{"line":262,"prefix":"And","index":7,"text":"match response.service contains 'qTest'"}},{"result":{"nanos":0,"startTime":1744301473979,"endTime":1744301473979,"millis":0.0,"status":"skipped"},"step":{"line":263,"prefix":"And","index":8,"text":"match response.error contains 'rate limit'"}},{"result":{"nanos":0,"startTime":1744301473979,"endTime":1744301473979,"millis":0.0,"status":"skipped"},"step":{"line":264,"prefix":"*","index":9,"text":"eval And match response.details.retryAfter != null"}}],"line":273,"description":"","durationMillis":2.781248,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","executorName":"main","name":"qTest provider error handling - Rate Limit","startTime":1744301473974,"refId":"[2.6:273]","endTime":1744301473979,"exampleData":{"errorType":"Rate Limit","simulationFunction":"simulateRateLimitError","expectedStatus":"429","errorPattern":"rate limit","additionalAssertions":"And match response.details.retryAfter != null"},"exampleIndex":5},{"sectionIndex":1,"stepResults":[{"result":{"nanos":188310,"startTime":1744301473984,"endTime":1744301473984,"millis":0.18831,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":165330,"startTime":1744301473984,"endTime":1744301473984,"millis":0.16533,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":150831,"startTime":1744301473985,"endTime":1744301473985,"millis":0.150831,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":133413,"startTime":1744301473985,"endTime":1744301473985,"millis":0.133413,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":198250,"startTime":1744301473985,"endTime":1744301473985,"millis":0.19825,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":114993,"startTime":1744301473985,"endTime":1744301473985,"millis":0.114993,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":159312,"startTime":1744301473985,"endTime":1744301473985,"millis":0.159312,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":149098,"startTime":1744301473986,"endTime":1744301473986,"millis":0.149098,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":132228,"startTime":1744301473986,"endTime":1744301473986,"millis":0.132228,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":199345,"startTime":1744301473986,"endTime":1744301473986,"millis":0.199345,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":125753,"startTime":1744301473986,"endTime":1744301473986,"millis":0.125753,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":116908,"startTime":1744301473986,"endTime":1744301473986,"millis":0.116908,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":133505,"startTime":1744301473986,"endTime":1744301473986,"millis":0.133505,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":315614,"startTime":1744301473987,"endTime":1744301473987,"millis":0.315614,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":137790,"startTime":1744301473987,"endTime":1744301473987,"millis":0.13779,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":832943,"startTime":1744301473987,"endTime":1744301473988,"millis":0.832943,"status":"passed"},"step":{"line":254,"prefix":"*","index":0,"text":"def errorConfig = call simulateTimeoutError 'qtest'"}},{"result":{"nanos":275854,"startTime":1744301473988,"endTime":1744301473988,"millis":0.275854,"status":"passed"},"step":{"line":256,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":150922,"startTime":1744301473988,"endTime":1744301473988,"millis":0.150922,"status":"passed"},"step":{"line":257,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":318532,"startTime":1744301473988,"endTime":1744301473988,"millis":0.318532,"status":"passed"},"step":{"line":258,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","startTime":1744301473989,"endTime":1744301473989,"millis":0.0,"status":"failed"},"step":{"line":259,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301473989,"endTime":1744301473989,"millis":0.0,"status":"skipped"},"step":{"line":260,"prefix":"Then","index":5,"text":"status 504"}},{"result":{"nanos":0,"startTime":1744301473989,"endTime":1744301473989,"millis":0.0,"status":"skipped"},"step":{"line":261,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301473989,"endTime":1744301473989,"millis":0.0,"status":"skipped"},"step":{"line":262,"prefix":"And","index":7,"text":"match response.service contains 'qTest'"}},{"result":{"nanos":0,"startTime":1744301473989,"endTime":1744301473989,"millis":0.0,"status":"skipped"},"step":{"line":263,"prefix":"And","index":8,"text":"match response.error contains 'timeout'"}},{"result":{"nanos":0,"startTime":1744301473989,"endTime":1744301473989,"millis":0.0,"status":"skipped"},"step":{"line":264,"prefix":"*","index":9,"text":"eval And match response.code == 'GATEWAY_TIMEOUT'"}}],"line":274,"description":"","durationMillis":3.998931,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","executorName":"main","name":"qTest provider error handling - Timeout","startTime":1744301473983,"refId":"[2.7:274]","endTime":1744301473989,"exampleData":{"errorType":"Timeout","simulationFunction":"simulateTimeoutError","expectedStatus":"504","errorPattern":"timeout","additionalAssertions":"And match response.code == 'GATEWAY_TIMEOUT'"},"exampleIndex":6},{"sectionIndex":1,"stepResults":[{"result":{"nanos":96937,"startTime":1744301473994,"endTime":1744301473994,"millis":0.096937,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":166333,"startTime":1744301473995,"endTime":1744301473995,"millis":0.166333,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":104962,"startTime":1744301473995,"endTime":1744301473995,"millis":0.104962,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":144903,"startTime":1744301473995,"endTime":1744301473995,"millis":0.144903,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":139705,"startTime":1744301473995,"endTime":1744301473995,"millis":0.139705,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":100037,"startTime":1744301473995,"endTime":1744301473995,"millis":0.100037,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":103502,"startTime":1744301473995,"endTime":1744301473995,"millis":0.103502,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":105873,"startTime":1744301473995,"endTime":1744301473995,"millis":0.105873,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":101678,"startTime":1744301473996,"endTime":1744301473996,"millis":0.101678,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":107059,"startTime":1744301473996,"endTime":1744301473996,"millis":0.107059,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":97484,"startTime":1744301473996,"endTime":1744301473996,"millis":0.097484,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":96207,"startTime":1744301473996,"endTime":1744301473996,"millis":0.096207,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":98760,"startTime":1744301473996,"endTime":1744301473996,"millis":0.09876,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":136057,"startTime":1744301473996,"endTime":1744301473996,"millis":0.136057,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":107424,"startTime":1744301473996,"endTime":1744301473996,"millis":0.107424,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":719683,"startTime":1744301473996,"endTime":1744301473997,"millis":0.719683,"status":"passed"},"step":{"line":254,"prefix":"*","index":0,"text":"def errorConfig = call simulateConflictError 'qtest'"}},{"result":{"nanos":99398,"startTime":1744301473997,"endTime":1744301473997,"millis":0.099398,"status":"passed"},"step":{"line":256,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":85173,"startTime":1744301473997,"endTime":1744301473997,"millis":0.085173,"status":"passed"},"step":{"line":257,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":118002,"startTime":1744301473997,"endTime":1744301473997,"millis":0.118002,"status":"passed"},"step":{"line":258,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","startTime":1744301473998,"endTime":1744301473998,"millis":0.0,"status":"failed"},"step":{"line":259,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301473998,"endTime":1744301473998,"millis":0.0,"status":"skipped"},"step":{"line":260,"prefix":"Then","index":5,"text":"status 409"}},{"result":{"nanos":0,"startTime":1744301473998,"endTime":1744301473998,"millis":0.0,"status":"skipped"},"step":{"line":261,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301473998,"endTime":1744301473998,"millis":0.0,"status":"skipped"},"step":{"line":262,"prefix":"And","index":7,"text":"match response.service contains 'qTest'"}},{"result":{"nanos":0,"startTime":1744301473998,"endTime":1744301473998,"millis":0.0,"status":"skipped"},"step":{"line":263,"prefix":"And","index":8,"text":"match response.error contains 'conflict'"}},{"result":{"nanos":0,"startTime":1744301473998,"endTime":1744301473998,"millis":0.0,"status":"skipped"},"step":{"line":264,"prefix":"*","index":9,"text":"eval And match response.code == 'CONFLICT'"}}],"line":275,"description":"","durationMillis":2.729177,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","executorName":"main","name":"qTest provider error handling - Conflict","startTime":1744301473993,"refId":"[2.8:275]","endTime":1744301473998,"exampleData":{"errorType":"Conflict","simulationFunction":"simulateConflictError","expectedStatus":"409","errorPattern":"conflict","additionalAssertions":"And match response.code == 'CONFLICT'"},"exampleIndex":7},{"sectionIndex":1,"stepResults":[{"result":{"nanos":72406,"startTime":1744301474004,"endTime":1744301474004,"millis":0.072406,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":152746,"startTime":1744301474004,"endTime":1744301474004,"millis":0.152746,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":107241,"startTime":1744301474004,"endTime":1744301474004,"millis":0.107241,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":199983,"startTime":1744301474004,"endTime":1744301474004,"millis":0.199983,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":134781,"startTime":1744301474005,"endTime":1744301474005,"millis":0.134781,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":171896,"startTime":1744301474005,"endTime":1744301474005,"millis":0.171896,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":110798,"startTime":1744301474005,"endTime":1744301474005,"millis":0.110798,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":106238,"startTime":1744301474005,"endTime":1744301474005,"millis":0.106238,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":118002,"startTime":1744301474005,"endTime":1744301474005,"millis":0.118002,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":157396,"startTime":1744301474005,"endTime":1744301474005,"millis":0.157396,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":106147,"startTime":1744301474005,"endTime":1744301474005,"millis":0.106147,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":107789,"startTime":1744301474006,"endTime":1744301474006,"millis":0.107789,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":102043,"startTime":1744301474006,"endTime":1744301474006,"millis":0.102043,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":133048,"startTime":1744301474006,"endTime":1744301474006,"millis":0.133048,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":113807,"startTime":1744301474006,"endTime":1744301474006,"millis":0.113807,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":704910,"startTime":1744301474006,"endTime":1744301474007,"millis":0.70491,"status":"passed"},"step":{"line":254,"prefix":"*","index":0,"text":"def errorConfig = call simulateUnprocessableEntityError 'qtest'"}},{"result":{"nanos":110798,"startTime":1744301474007,"endTime":1744301474007,"millis":0.110798,"status":"passed"},"step":{"line":256,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":78334,"startTime":1744301474007,"endTime":1744301474007,"millis":0.078334,"status":"passed"},"step":{"line":257,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":144721,"startTime":1744301474007,"endTime":1744301474007,"millis":0.144721,"status":"passed"},"step":{"line":258,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","startTime":1744301474007,"endTime":1744301474007,"millis":0.0,"status":"failed"},"step":{"line":259,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301474007,"endTime":1744301474007,"millis":0.0,"status":"skipped"},"step":{"line":260,"prefix":"Then","index":5,"text":"status 422"}},{"result":{"nanos":0,"startTime":1744301474007,"endTime":1744301474007,"millis":0.0,"status":"skipped"},"step":{"line":261,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301474007,"endTime":1744301474007,"millis":0.0,"status":"skipped"},"step":{"line":262,"prefix":"And","index":7,"text":"match response.service contains 'qTest'"}},{"result":{"nanos":0,"startTime":1744301474007,"endTime":1744301474007,"millis":0.0,"status":"skipped"},"step":{"line":263,"prefix":"And","index":8,"text":"match response.error contains 'validation'"}},{"result":{"nanos":0,"startTime":1744301474007,"endTime":1744301474007,"millis":0.0,"status":"skipped"},"step":{"line":264,"prefix":"*","index":9,"text":"eval And match response.code == 'UNPROCESSABLE_ENTITY'"}}],"line":276,"description":"","durationMillis":2.933084,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","executorName":"main","name":"qTest provider error handling - Unprocessable Entity","startTime":1744301474002,"refId":"[2.9:276]","endTime":1744301474007,"exampleData":{"errorType":"Unprocessable Entity","simulationFunction":"simulateUnprocessableEntityError","expectedStatus":"422","errorPattern":"validation","additionalAssertions":"And match response.code == 'UNPROCESSABLE_ENTITY'"},"exampleIndex":8},{"sectionIndex":1,"stepResults":[{"result":{"nanos":106238,"startTime":1744301474013,"endTime":1744301474013,"millis":0.106238,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":274577,"startTime":1744301474013,"endTime":1744301474013,"millis":0.274577,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":112257,"startTime":1744301474013,"endTime":1744301474013,"millis":0.112257,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":172352,"startTime":1744301474013,"endTime":1744301474013,"millis":0.172352,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":157579,"startTime":1744301474014,"endTime":1744301474014,"millis":0.157579,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":106238,"startTime":1744301474014,"endTime":1744301474014,"millis":0.106238,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":133139,"startTime":1744301474014,"endTime":1744301474014,"millis":0.133139,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":101314,"startTime":1744301474014,"endTime":1744301474014,"millis":0.101314,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":94383,"startTime":1744301474014,"endTime":1744301474014,"millis":0.094383,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":97940,"startTime":1744301474014,"endTime":1744301474014,"millis":0.09794,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":154570,"startTime":1744301474014,"endTime":1744301474014,"millis":0.15457,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":97484,"startTime":1744301474015,"endTime":1744301474015,"millis":0.097484,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":129036,"startTime":1744301474015,"endTime":1744301474015,"millis":0.129036,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":97939,"startTime":1744301474015,"endTime":1744301474015,"millis":0.097939,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":111801,"startTime":1744301474015,"endTime":1744301474015,"millis":0.111801,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":978484,"startTime":1744301474015,"endTime":1744301474016,"millis":0.978484,"status":"passed"},"step":{"line":254,"prefix":"*","index":0,"text":"def errorConfig = call simulateBatchOperationError 'qtest'"}},{"result":{"nanos":134143,"startTime":1744301474016,"endTime":1744301474016,"millis":0.134143,"status":"passed"},"step":{"line":256,"prefix":"Given","index":1,"text":"url errorConfig.url"}},{"result":{"nanos":179647,"startTime":1744301474016,"endTime":1744301474016,"millis":0.179647,"status":"passed"},"step":{"line":257,"prefix":"And","index":2,"text":"request errorConfig.body"}},{"result":{"nanos":190134,"startTime":1744301474017,"endTime":1744301474017,"millis":0.190134,"status":"passed"},"step":{"line":258,"prefix":"And","index":3,"text":"headers errorConfig.headers || {}"}},{"result":{"nanos":0,"errorMessage":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","startTime":1744301474017,"endTime":1744301474017,"millis":0.0,"status":"failed"},"step":{"line":259,"prefix":"When","index":4,"text":"method <errorConfig.method>"}},{"result":{"nanos":0,"startTime":1744301474017,"endTime":1744301474017,"millis":0.0,"status":"skipped"},"step":{"line":260,"prefix":"Then","index":5,"text":"status 400"}},{"result":{"nanos":0,"startTime":1744301474017,"endTime":1744301474017,"millis":0.0,"status":"skipped"},"step":{"line":261,"prefix":"And","index":6,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301474017,"endTime":1744301474017,"millis":0.0,"status":"skipped"},"step":{"line":262,"prefix":"And","index":7,"text":"match response.service contains 'qTest'"}},{"result":{"nanos":0,"startTime":1744301474017,"endTime":1744301474017,"millis":0.0,"status":"skipped"},"step":{"line":263,"prefix":"And","index":8,"text":"match response.error contains 'batch'"}},{"result":{"nanos":0,"startTime":1744301474017,"endTime":1744301474017,"millis":0.0,"status":"skipped"},"step":{"line":264,"prefix":"*","index":9,"text":"eval And match response.details.errors != null"}}],"line":277,"description":"","durationMillis":3.429255,"failed":true,"error":"no step-definition method match found for: method <errorConfig.method>\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:259","executorName":"main","name":"qTest provider error handling - Batch Operation Errors","startTime":1744301474011,"refId":"[2.10:277]","endTime":1744301474017,"exampleData":{"errorType":"Batch Operation Errors","simulationFunction":"simulateBatchOperationError","expectedStatus":"400","errorPattern":"batch","additionalAssertions":"And match response.details.errors != null"},"exampleIndex":9},{"sectionIndex":2,"stepResults":[{"result":{"nanos":266553,"startTime":1744301474023,"endTime":1744301474023,"millis":0.266553,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":263817,"startTime":1744301474024,"endTime":1744301474024,"millis":0.263817,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":152290,"startTime":1744301474024,"endTime":1744301474024,"millis":0.15229,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":213479,"startTime":1744301474024,"endTime":1744301474024,"millis":0.213479,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":376256,"startTime":1744301474024,"endTime":1744301474024,"millis":0.376256,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":138337,"startTime":1744301474025,"endTime":1744301474025,"millis":0.138337,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":193964,"startTime":1744301474025,"endTime":1744301474025,"millis":0.193964,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":107697,"startTime":1744301474025,"endTime":1744301474025,"millis":0.107697,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":162139,"startTime":1744301474025,"endTime":1744301474025,"millis":0.162139,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":113260,"startTime":1744301474025,"endTime":1744301474025,"millis":0.11326,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":132957,"startTime":1744301474025,"endTime":1744301474025,"millis":0.132957,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":107515,"startTime":1744301474026,"endTime":1744301474026,"millis":0.107515,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":131407,"startTime":1744301474026,"endTime":1744301474026,"millis":0.131407,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":145997,"startTime":1744301474026,"endTime":1744301474026,"millis":0.145997,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":109521,"startTime":1744301474026,"endTime":1744301474026,"millis":0.109521,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":759534,"startTime":1744301474026,"endTime":1744301474027,"millis":0.759534,"status":"passed"},"step":{"comments":["# Test with Zephyr provider - API Token"],"line":282,"prefix":"Given","index":0,"text":"url apiBaseUrl + zephyrBasePath + '\/auth'"}},{"result":{"nanos":90280,"startTime":1744301474027,"endTime":1744301474027,"millis":0.09028,"status":"passed"},"step":{"line":283,"prefix":"And","index":1,"text":"request { apiToken: 'secret-token-value', username: 'testuser' }"}},{"result":{"nanos":257362163,"errorMessage":"http call failed after 224 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/auth\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:284","startTime":1744301474027,"endTime":1744301474284,"millis":257.362163,"status":"failed"},"step":{"line":284,"prefix":"When","index":2,"text":"method POST"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":285,"prefix":"Then","index":3,"text":"status 401"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":286,"prefix":"And","index":4,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":287,"prefix":"And","index":5,"text":"match response.error !contains 'secret-token-value'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":288,"prefix":"And","index":6,"text":"match response.details.params !contains 'secret-token-value'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":289,"prefix":"And","index":7,"text":"match response.details.params contains '***REDACTED***'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":290,"prefix":"And","index":8,"text":"match response.details.params.username == 'testuser'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"comments":["# Test with Zephyr provider - OAuth token in header"],"line":293,"prefix":"Given","index":9,"text":"url apiBaseUrl + zephyrBasePath + '\/secured-resource'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":294,"prefix":"And","index":10,"text":"header Authorization = 'Bearer oauth-token-123456'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":295,"prefix":"When","index":11,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":296,"prefix":"Then","index":12,"text":"status 401"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":297,"prefix":"And","index":13,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":298,"prefix":"And","index":14,"text":"match response.error !contains 'oauth-token-123456'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":299,"prefix":"And","index":15,"text":"match response.details.headers !contains 'oauth-token-123456'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":300,"prefix":"And","index":16,"text":"match response.details.headers.Authorization contains '***REDACTED***'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"comments":["# Test with qTest provider - Username\/Password"],"line":303,"prefix":"Given","index":17,"text":"url apiBaseUrl + qtestBasePath + '\/auth'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":304,"prefix":"And","index":18,"text":"request { username: 'testuser', password: 'secret-password' }"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":305,"prefix":"When","index":19,"text":"method POST"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":306,"prefix":"Then","index":20,"text":"status 401"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":307,"prefix":"And","index":21,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":308,"prefix":"And","index":22,"text":"match response.error !contains 'secret-password'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":309,"prefix":"And","index":23,"text":"match response.details.params !contains 'secret-password'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":310,"prefix":"And","index":24,"text":"match response.details.params contains '***REDACTED***'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":311,"prefix":"And","index":25,"text":"match response.details.params.username == 'testuser'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"comments":["# Test with qTest provider - API key in query parameter"],"line":314,"prefix":"Given","index":26,"text":"url apiBaseUrl + qtestBasePath + '\/projects'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":315,"prefix":"And","index":27,"text":"param apiKey = 'sensitive-api-key-12345'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":316,"prefix":"When","index":28,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":317,"prefix":"Then","index":29,"text":"status 401"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":318,"prefix":"And","index":30,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":319,"prefix":"And","index":31,"text":"match response.error !contains 'sensitive-api-key-12345'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":320,"prefix":"And","index":32,"text":"match response.details.params !contains 'sensitive-api-key-12345'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":321,"prefix":"And","index":33,"text":"match response.details.params.apiKey contains '***REDACTED***'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"comments":["# Test redaction of pattern-matching data like credit cards and passwords"],"line":324,"prefix":"Given","index":34,"text":"url apiBaseUrl + zephyrBasePath + '\/test-cases'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":325,"prefix":"And","index":35,"text":"request { name: 'Test Case', description: 'Contains sensitive data: 4111-1111-1111-1111 and password123' }"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":326,"prefix":"When","index":36,"text":"method POST"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":327,"prefix":"Then","index":37,"text":"status 400"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":328,"prefix":"And","index":38,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":329,"prefix":"And","index":39,"text":"match response.error !contains '4111-1111-1111-1111'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":330,"prefix":"And","index":40,"text":"match response.error !contains 'password123'"}},{"result":{"nanos":0,"startTime":1744301474285,"endTime":1744301474285,"millis":0.0,"status":"skipped"},"step":{"line":331,"prefix":"And","index":41,"text":"match response.details.params.description contains '***REDACTED***'"}}],"line":280,"description":"","durationMillis":260.827166,"failed":true,"error":"http call failed after 224 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/auth\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:284","executorName":"main","name":"Sensitive information is redacted in error responses","startTime":1744301474021,"refId":"[3:280]","endTime":1744301474285,"exampleIndex":-1},{"sectionIndex":3,"stepResults":[{"result":{"nanos":76783,"startTime":1744301474297,"endTime":1744301474297,"millis":0.076783,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":407991,"startTime":1744301474297,"endTime":1744301474297,"millis":0.407991,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":245761,"startTime":1744301474297,"endTime":1744301474297,"millis":0.245761,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":140343,"startTime":1744301474298,"endTime":1744301474298,"millis":0.140343,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":928330,"startTime":1744301474299,"endTime":1744301474300,"millis":0.92833,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":970733,"startTime":1744301474300,"endTime":1744301474301,"millis":0.970733,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":973287,"startTime":1744301474301,"endTime":1744301474302,"millis":0.973287,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":836590,"startTime":1744301474302,"endTime":1744301474303,"millis":0.83659,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":998364,"startTime":1744301474303,"endTime":1744301474304,"millis":0.998364,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":834858,"startTime":1744301474304,"endTime":1744301474305,"millis":0.834858,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":1763643,"startTime":1744301474305,"endTime":1744301474307,"millis":1.763643,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":2379186,"startTime":1744301474307,"endTime":1744301474309,"millis":2.379186,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":1180017,"startTime":1744301474309,"endTime":1744301474310,"millis":1.180017,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":1579619,"startTime":1744301474310,"endTime":1744301474312,"millis":1.579619,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":1457058,"startTime":1744301474312,"endTime":1744301474313,"millis":1.457058,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":730079,"startTime":1744301474313,"endTime":1744301474314,"millis":0.730079,"status":"passed"},"step":{"line":335,"prefix":"Given","index":0,"text":"url apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id'"}},{"result":{"nanos":1505572,"errorMessage":"http call failed after 2 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/test-cases\/non-existent-id\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:336","startTime":1744301474314,"endTime":1744301474316,"millis":1.505572,"status":"failed"},"step":{"line":336,"prefix":"When","index":1,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474316,"endTime":1744301474316,"millis":0.0,"status":"skipped"},"step":{"line":337,"prefix":"Then","index":2,"text":"status 404"}},{"result":{"nanos":0,"startTime":1744301474316,"endTime":1744301474316,"millis":0.0,"status":"skipped"},"step":{"line":338,"prefix":"And","index":3,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301474316,"endTime":1744301474316,"millis":0.0,"status":"skipped"},"step":{"line":339,"prefix":"And","index":4,"text":"match response.operation == 'getTestCase'"}},{"result":{"nanos":0,"startTime":1744301474316,"endTime":1744301474316,"millis":0.0,"status":"skipped"},"step":{"line":340,"prefix":"And","index":5,"text":"match response.details.params.testCaseId == 'non-existent-id'"}},{"result":{"nanos":0,"startTime":1744301474316,"endTime":1744301474316,"millis":0.0,"status":"skipped"},"step":{"line":342,"prefix":"Given","index":6,"text":"url apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id'"}},{"result":{"nanos":0,"startTime":1744301474316,"endTime":1744301474316,"millis":0.0,"status":"skipped"},"step":{"line":343,"prefix":"When","index":7,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474316,"endTime":1744301474316,"millis":0.0,"status":"skipped"},"step":{"line":344,"prefix":"Then","index":8,"text":"status 404"}},{"result":{"nanos":0,"startTime":1744301474316,"endTime":1744301474316,"millis":0.0,"status":"skipped"},"step":{"line":345,"prefix":"And","index":9,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301474316,"endTime":1744301474316,"millis":0.0,"status":"skipped"},"step":{"line":346,"prefix":"And","index":10,"text":"match response.operation == 'getTestCase'"}},{"result":{"nanos":0,"startTime":1744301474316,"endTime":1744301474316,"millis":0.0,"status":"skipped"},"step":{"line":347,"prefix":"And","index":11,"text":"match response.details.params.testCaseId == 'non-existent-id'"}}],"line":334,"description":"","durationMillis":17.008214,"failed":true,"error":"http call failed after 2 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/test-cases\/non-existent-id\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:336","executorName":"main","name":"Error responses include operation context information","startTime":1744301474290,"refId":"[4:334]","endTime":1744301474316,"exampleIndex":-1},{"sectionIndex":4,"stepResults":[{"result":{"nanos":146089,"startTime":1744301474321,"endTime":1744301474321,"millis":0.146089,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":195059,"startTime":1744301474321,"endTime":1744301474321,"millis":0.195059,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":164692,"startTime":1744301474321,"endTime":1744301474321,"millis":0.164692,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":141803,"startTime":1744301474321,"endTime":1744301474321,"millis":0.141803,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":211838,"startTime":1744301474321,"endTime":1744301474321,"millis":0.211838,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":169342,"startTime":1744301474322,"endTime":1744301474322,"millis":0.169342,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":99216,"startTime":1744301474322,"endTime":1744301474322,"millis":0.099216,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":119734,"startTime":1744301474322,"endTime":1744301474322,"millis":0.119734,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":166516,"startTime":1744301474322,"endTime":1744301474322,"millis":0.166516,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":308228,"startTime":1744301474322,"endTime":1744301474322,"millis":0.308228,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":118184,"startTime":1744301474323,"endTime":1744301474323,"millis":0.118184,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":75780,"startTime":1744301474323,"endTime":1744301474323,"millis":0.07578,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":167975,"startTime":1744301474323,"endTime":1744301474323,"millis":0.167975,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":82528,"startTime":1744301474323,"endTime":1744301474323,"millis":0.082528,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":141711,"startTime":1744301474323,"endTime":1744301474323,"millis":0.141711,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":747770,"startTime":1744301474323,"endTime":1744301474324,"millis":0.74777,"status":"passed"},"step":{"comments":["# The client will retry automatically for certain error types"],"line":352,"prefix":"Given","index":0,"text":"url apiBaseUrl + zephyrBasePath + '\/retry-test'"}},{"result":{"nanos":1268839,"errorMessage":"http call failed after 1 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/retry-test\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:353","startTime":1744301474324,"endTime":1744301474325,"millis":1.268839,"status":"failed"},"step":{"line":353,"prefix":"When","index":1,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474325,"endTime":1744301474325,"millis":0.0,"status":"skipped"},"step":{"line":354,"prefix":"Then","index":2,"text":"status 200"}},{"result":{"nanos":0,"startTime":1744301474325,"endTime":1744301474325,"millis":0.0,"status":"skipped"},"step":{"line":355,"prefix":"And","index":3,"text":"match response.retriedCount == 2"}},{"result":{"nanos":0,"startTime":1744301474325,"endTime":1744301474325,"millis":0.0,"status":"skipped"},"step":{"line":356,"prefix":"And","index":4,"text":"match response.requestId != null"}},{"result":{"nanos":0,"startTime":1744301474325,"endTime":1744301474325,"millis":0.0,"status":"skipped"},"step":{"line":358,"prefix":"Given","index":5,"text":"url apiBaseUrl + qtestBasePath + '\/retry-test'"}},{"result":{"nanos":0,"startTime":1744301474325,"endTime":1744301474325,"millis":0.0,"status":"skipped"},"step":{"line":359,"prefix":"When","index":6,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474325,"endTime":1744301474325,"millis":0.0,"status":"skipped"},"step":{"line":360,"prefix":"Then","index":7,"text":"status 200"}},{"result":{"nanos":0,"startTime":1744301474325,"endTime":1744301474325,"millis":0.0,"status":"skipped"},"step":{"line":361,"prefix":"And","index":8,"text":"match response.retriedCount == 2"}},{"result":{"nanos":0,"startTime":1744301474325,"endTime":1744301474325,"millis":0.0,"status":"skipped"},"step":{"line":362,"prefix":"And","index":9,"text":"match response.requestId != null"}}],"line":350,"description":"","durationMillis":4.325304,"failed":true,"error":"http call failed after 1 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/retry-test\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:353","executorName":"main","name":"Retry mechanism handles transient errors","startTime":1744301474319,"refId":"[5:350]","endTime":1744301474325,"exampleIndex":-1},{"sectionIndex":5,"stepResults":[{"result":{"nanos":52799,"startTime":1744301474330,"endTime":1744301474330,"millis":0.052799,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":100585,"startTime":1744301474330,"endTime":1744301474330,"millis":0.100585,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":63834,"startTime":1744301474330,"endTime":1744301474330,"millis":0.063834,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":114263,"startTime":1744301474330,"endTime":1744301474330,"millis":0.114263,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":88091,"startTime":1744301474330,"endTime":1744301474330,"millis":0.088091,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":77604,"startTime":1744301474331,"endTime":1744301474331,"millis":0.077604,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":78425,"startTime":1744301474331,"endTime":1744301474331,"millis":0.078425,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":77512,"startTime":1744301474331,"endTime":1744301474331,"millis":0.077512,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":73865,"startTime":1744301474331,"endTime":1744301474331,"millis":0.073865,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":72953,"startTime":1744301474331,"endTime":1744301474331,"millis":0.072953,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":77786,"startTime":1744301474331,"endTime":1744301474331,"millis":0.077786,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":88091,"startTime":1744301474331,"endTime":1744301474331,"millis":0.088091,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":143445,"startTime":1744301474331,"endTime":1744301474331,"millis":0.143445,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":83349,"startTime":1744301474331,"endTime":1744301474331,"millis":0.083349,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":78424,"startTime":1744301474331,"endTime":1744301474331,"millis":0.078424,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":717495,"startTime":1744301474332,"endTime":1744301474333,"millis":0.717495,"status":"passed"},"step":{"line":366,"prefix":"Given","index":0,"text":"url apiBaseUrl + zephyrBasePath + '\/rate-limit-test'"}},{"result":{"nanos":1323918,"errorMessage":"http call failed after 2 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/rate-limit-test\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:367","startTime":1744301474332,"endTime":1744301474333,"millis":1.323918,"status":"failed"},"step":{"line":367,"prefix":"When","index":1,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474334,"endTime":1744301474334,"millis":0.0,"status":"skipped"},"step":{"line":368,"prefix":"Then","index":2,"text":"status 429"}},{"result":{"nanos":0,"startTime":1744301474334,"endTime":1744301474334,"millis":0.0,"status":"skipped"},"step":{"line":369,"prefix":"And","index":3,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301474334,"endTime":1744301474334,"millis":0.0,"status":"skipped"},"step":{"line":370,"prefix":"And","index":4,"text":"match response.details.retryAfter != null"}},{"result":{"nanos":0,"startTime":1744301474334,"endTime":1744301474334,"millis":0.0,"status":"skipped"},"step":{"line":372,"prefix":"Given","index":5,"text":"url apiBaseUrl + qtestBasePath + '\/rate-limit-test'"}},{"result":{"nanos":0,"startTime":1744301474334,"endTime":1744301474334,"millis":0.0,"status":"skipped"},"step":{"line":373,"prefix":"When","index":6,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474334,"endTime":1744301474334,"millis":0.0,"status":"skipped"},"step":{"line":374,"prefix":"Then","index":7,"text":"status 429"}},{"result":{"nanos":0,"startTime":1744301474334,"endTime":1744301474334,"millis":0.0,"status":"skipped"},"step":{"line":375,"prefix":"And","index":8,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301474334,"endTime":1744301474334,"millis":0.0,"status":"skipped"},"step":{"line":376,"prefix":"And","index":9,"text":"match response.details.retryAfter != null"}}],"line":365,"description":"","durationMillis":3.312439,"failed":true,"error":"http call failed after 2 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/rate-limit-test\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:367","executorName":"main","name":"Rate limiting is handled consistently across providers","startTime":1744301474329,"refId":"[6:365]","endTime":1744301474334,"exampleIndex":-1},{"sectionIndex":6,"stepResults":[{"result":{"nanos":125935,"startTime":1744301474340,"endTime":1744301474340,"millis":0.125935,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":192141,"startTime":1744301474340,"endTime":1744301474340,"millis":0.192141,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":140891,"startTime":1744301474340,"endTime":1744301474340,"millis":0.140891,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":167793,"startTime":1744301474340,"endTime":1744301474340,"millis":0.167793,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":128671,"startTime":1744301474340,"endTime":1744301474340,"millis":0.128671,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":120555,"startTime":1744301474340,"endTime":1744301474340,"millis":0.120555,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":128398,"startTime":1744301474341,"endTime":1744301474341,"millis":0.128398,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":130130,"startTime":1744301474341,"endTime":1744301474341,"millis":0.13013,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":123199,"startTime":1744301474341,"endTime":1744301474341,"millis":0.123199,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":125480,"startTime":1744301474341,"endTime":1744301474341,"millis":0.12548,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":149372,"startTime":1744301474341,"endTime":1744301474341,"millis":0.149372,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":115540,"startTime":1744301474341,"endTime":1744301474341,"millis":0.11554,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":152108,"startTime":1744301474342,"endTime":1744301474342,"millis":0.152108,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":130951,"startTime":1744301474342,"endTime":1744301474342,"millis":0.130951,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":171075,"startTime":1744301474342,"endTime":1744301474342,"millis":0.171075,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":881274,"startTime":1744301474342,"endTime":1744301474343,"millis":0.881274,"status":"passed"},"step":{"comments":["# First call to trigger circuit breaker state change"],"line":381,"prefix":"Given","index":0,"text":"url apiBaseUrl + zephyrBasePath + '\/circuit-breaker-test'"}},{"result":{"nanos":2056368,"errorMessage":"http call failed after 2 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/circuit-breaker-test\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:382","startTime":1744301474343,"endTime":1744301474345,"millis":2.056368,"status":"failed"},"step":{"line":382,"prefix":"When","index":1,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474345,"endTime":1744301474345,"millis":0.0,"status":"skipped"},"step":{"line":383,"prefix":"Then","index":2,"text":"status 500"}},{"result":{"nanos":0,"startTime":1744301474345,"endTime":1744301474345,"millis":0.0,"status":"skipped"},"step":{"line":384,"prefix":"And","index":3,"text":"match response.error contains 'server error'"}},{"result":{"nanos":0,"startTime":1744301474345,"endTime":1744301474345,"millis":0.0,"status":"skipped"},"step":{"comments":["# Second call should short-circuit and return immediately"],"line":387,"prefix":"Given","index":4,"text":"url apiBaseUrl + zephyrBasePath + '\/circuit-breaker-test'"}},{"result":{"nanos":0,"startTime":1744301474345,"endTime":1744301474345,"millis":0.0,"status":"skipped"},"step":{"line":388,"prefix":"When","index":5,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474345,"endTime":1744301474345,"millis":0.0,"status":"skipped"},"step":{"line":389,"prefix":"Then","index":6,"text":"status 503"}},{"result":{"nanos":0,"startTime":1744301474345,"endTime":1744301474345,"millis":0.0,"status":"skipped"},"step":{"line":390,"prefix":"And","index":7,"text":"match response.error contains 'circuit breaker'"}},{"result":{"nanos":0,"startTime":1744301474345,"endTime":1744301474345,"millis":0.0,"status":"skipped"},"step":{"line":391,"prefix":"And","index":8,"text":"match response.code == 'CIRCUIT_OPEN'"}},{"result":{"nanos":0,"startTime":1744301474345,"endTime":1744301474345,"millis":0.0,"status":"skipped"},"step":{"line":392,"prefix":"And","index":9,"text":"match response.details.reopenAfter != null"}},{"result":{"nanos":0,"startTime":1744301474345,"endTime":1744301474345,"millis":0.0,"status":"skipped"},"step":{"comments":["# Verify qTest circuit breaker behaves the same way"],"line":395,"prefix":"Given","index":10,"text":"url apiBaseUrl + qtestBasePath + '\/circuit-breaker-test'"}},{"result":{"nanos":0,"startTime":1744301474345,"endTime":1744301474345,"millis":0.0,"status":"skipped"},"step":{"line":396,"prefix":"When","index":11,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474345,"endTime":1744301474345,"millis":0.0,"status":"skipped"},"step":{"line":397,"prefix":"Then","index":12,"text":"status 500"}},{"result":{"nanos":0,"startTime":1744301474345,"endTime":1744301474345,"millis":0.0,"status":"skipped"},"step":{"line":398,"prefix":"And","index":13,"text":"match response.error contains 'server error'"}},{"result":{"nanos":0,"startTime":1744301474345,"endTime":1744301474345,"millis":0.0,"status":"skipped"},"step":{"line":400,"prefix":"Given","index":14,"text":"url apiBaseUrl + qtestBasePath + '\/circuit-breaker-test'"}},{"result":{"nanos":0,"startTime":1744301474345,"endTime":1744301474345,"millis":0.0,"status":"skipped"},"step":{"line":401,"prefix":"When","index":15,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474345,"endTime":1744301474345,"millis":0.0,"status":"skipped"},"step":{"line":402,"prefix":"Then","index":16,"text":"status 503"}},{"result":{"nanos":0,"startTime":1744301474345,"endTime":1744301474345,"millis":0.0,"status":"skipped"},"step":{"line":403,"prefix":"And","index":17,"text":"match response.error contains 'circuit breaker'"}},{"result":{"nanos":0,"startTime":1744301474345,"endTime":1744301474345,"millis":0.0,"status":"skipped"},"step":{"line":404,"prefix":"And","index":18,"text":"match response.code == 'CIRCUIT_OPEN'"}},{"result":{"nanos":0,"startTime":1744301474345,"endTime":1744301474345,"millis":0.0,"status":"skipped"},"step":{"line":405,"prefix":"And","index":19,"text":"match response.details.reopenAfter != null"}}],"line":379,"description":"","durationMillis":5.039881,"failed":true,"error":"http call failed after 2 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/circuit-breaker-test\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:382","executorName":"main","name":"Circuit breaker prevents cascading failures","startTime":1744301474338,"refId":"[7:379]","endTime":1744301474345,"exampleIndex":-1},{"sectionIndex":7,"stepResults":[{"result":{"nanos":82254,"startTime":1744301474353,"endTime":1744301474353,"millis":0.082254,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":159312,"startTime":1744301474354,"endTime":1744301474354,"millis":0.159312,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":109065,"startTime":1744301474354,"endTime":1744301474354,"millis":0.109065,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":209923,"startTime":1744301474354,"endTime":1744301474354,"millis":0.209923,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":155025,"startTime":1744301474354,"endTime":1744301474354,"millis":0.155025,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":198342,"startTime":1744301474354,"endTime":1744301474354,"millis":0.198342,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":134143,"startTime":1744301474355,"endTime":1744301474355,"millis":0.134143,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":142897,"startTime":1744301474355,"endTime":1744301474355,"millis":0.142897,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":164783,"startTime":1744301474355,"endTime":1744301474355,"millis":0.164783,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":153567,"startTime":1744301474355,"endTime":1744301474355,"millis":0.153567,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":236551,"startTime":1744301474355,"endTime":1744301474355,"millis":0.236551,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":207552,"startTime":1744301474356,"endTime":1744301474356,"millis":0.207552,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":125206,"startTime":1744301474356,"endTime":1744301474356,"millis":0.125206,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":192505,"startTime":1744301474356,"endTime":1744301474356,"millis":0.192505,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":137882,"startTime":1744301474356,"endTime":1744301474356,"millis":0.137882,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":13148080,"startTime":1744301474356,"endTime":1744301474369,"millis":13.14808,"status":"passed"},"step":{"comments":["# Set environment to development"],"line":410,"prefix":"*","index":0,"text":"def originalEnv = karate.get('env.NODE_ENV') || 'development'"}},{"result":{"nanos":2517068,"startTime":1744301474370,"endTime":1744301474373,"millis":2.517068,"status":"passed"},"step":{"line":411,"prefix":"*","index":1,"text":"karate.set('env.NODE_ENV', 'development')"}},{"result":{"nanos":553715,"startTime":1744301474372,"endTime":1744301474373,"millis":0.553715,"status":"passed"},"step":{"line":413,"prefix":"Given","index":2,"text":"url apiBaseUrl + zephyrBasePath + '\/simulate-server-error'"}},{"result":{"nanos":1255889,"errorMessage":"http call failed after 1 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/simulate-server-error\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:414","startTime":1744301474373,"endTime":1744301474374,"millis":1.255889,"status":"failed"},"step":{"line":414,"prefix":"When","index":3,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474374,"endTime":1744301474374,"millis":0.0,"status":"skipped"},"step":{"line":415,"prefix":"Then","index":4,"text":"status 500"}},{"result":{"nanos":0,"startTime":1744301474374,"endTime":1744301474374,"millis":0.0,"status":"skipped"},"step":{"line":416,"prefix":"And","index":5,"text":"match response.error contains 'server error'"}},{"result":{"nanos":0,"startTime":1744301474374,"endTime":1744301474374,"millis":0.0,"status":"skipped"},"step":{"line":417,"prefix":"And","index":6,"text":"match response.details.stack != null"}},{"result":{"nanos":0,"startTime":1744301474374,"endTime":1744301474374,"millis":0.0,"status":"skipped"},"step":{"comments":["# Set environment to production"],"line":420,"prefix":"*","index":7,"text":"karate.set('env.NODE_ENV', 'production')"}},{"result":{"nanos":0,"startTime":1744301474374,"endTime":1744301474374,"millis":0.0,"status":"skipped"},"step":{"line":422,"prefix":"Given","index":8,"text":"url apiBaseUrl + zephyrBasePath + '\/simulate-server-error'"}},{"result":{"nanos":0,"startTime":1744301474374,"endTime":1744301474374,"millis":0.0,"status":"skipped"},"step":{"line":423,"prefix":"When","index":9,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474374,"endTime":1744301474374,"millis":0.0,"status":"skipped"},"step":{"line":424,"prefix":"Then","index":10,"text":"status 500"}},{"result":{"nanos":0,"startTime":1744301474374,"endTime":1744301474374,"millis":0.0,"status":"skipped"},"step":{"line":425,"prefix":"And","index":11,"text":"match response.error contains 'server error'"}},{"result":{"nanos":0,"startTime":1744301474374,"endTime":1744301474374,"millis":0.0,"status":"skipped"},"step":{"line":426,"prefix":"And","index":12,"text":"match response.details.stack == null"}},{"result":{"nanos":0,"startTime":1744301474374,"endTime":1744301474374,"millis":0.0,"status":"skipped"},"step":{"comments":["# Reset environment"],"line":429,"prefix":"*","index":13,"text":"karate.set('env.NODE_ENV', originalEnv)"}}],"line":408,"description":"","durationMillis":19.883759,"failed":true,"error":"http call failed after 1 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/simulate-server-error\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:414","executorName":"main","name":"Error responses include stack traces in development mode only","startTime":1744301474352,"refId":"[8:408]","endTime":1744301474374,"exampleIndex":-1},{"sectionIndex":8,"stepResults":[{"result":{"nanos":41128,"startTime":1744301474378,"endTime":1744301474378,"millis":0.041128,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":132958,"startTime":1744301474378,"endTime":1744301474378,"millis":0.132958,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":56721,"startTime":1744301474378,"endTime":1744301474378,"millis":0.056721,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":124567,"startTime":1744301474378,"endTime":1744301474378,"millis":0.124567,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":83988,"startTime":1744301474379,"endTime":1744301474379,"millis":0.083988,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":78334,"startTime":1744301474379,"endTime":1744301474379,"millis":0.078334,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":145541,"startTime":1744301474379,"endTime":1744301474379,"millis":0.145541,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":95842,"startTime":1744301474379,"endTime":1744301474379,"millis":0.095842,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":74686,"startTime":1744301474379,"endTime":1744301474379,"millis":0.074686,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":70947,"startTime":1744301474379,"endTime":1744301474379,"millis":0.070947,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":80704,"startTime":1744301474379,"endTime":1744301474379,"millis":0.080704,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":67026,"startTime":1744301474379,"endTime":1744301474379,"millis":0.067026,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":69215,"startTime":1744301474379,"endTime":1744301474379,"millis":0.069215,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":68667,"startTime":1744301474379,"endTime":1744301474379,"millis":0.068667,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":74047,"startTime":1744301474379,"endTime":1744301474379,"millis":0.074047,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":499821,"startTime":1744301474380,"endTime":1744301474380,"millis":0.499821,"status":"passed"},"step":{"comments":["# First call generates an error with correlation ID"],"line":434,"prefix":"Given","index":0,"text":"url apiBaseUrl + zephyrBasePath + '\/correlated-error'"}},{"result":{"nanos":3330496,"errorMessage":"http call failed after 2 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/correlated-error\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:435","startTime":1744301474380,"endTime":1744301474383,"millis":3.330496,"status":"failed"},"step":{"line":435,"prefix":"When","index":1,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474384,"endTime":1744301474384,"millis":0.0,"status":"skipped"},"step":{"line":436,"prefix":"Then","index":2,"text":"status 500"}},{"result":{"nanos":0,"startTime":1744301474384,"endTime":1744301474384,"millis":0.0,"status":"skipped"},"step":{"line":437,"prefix":"And","index":3,"text":"match response.requestId != null"}},{"result":{"nanos":0,"startTime":1744301474384,"endTime":1744301474384,"millis":0.0,"status":"skipped"},"step":{"line":439,"prefix":"*","index":4,"text":"def correlationId = response.requestId"}},{"result":{"nanos":0,"startTime":1744301474384,"endTime":1744301474384,"millis":0.0,"status":"skipped"},"step":{"comments":["# Second call with correlation header should preserve the ID"],"line":442,"prefix":"Given","index":5,"text":"url apiBaseUrl + zephyrBasePath + '\/correlated-error'"}},{"result":{"nanos":0,"startTime":1744301474384,"endTime":1744301474384,"millis":0.0,"status":"skipped"},"step":{"line":443,"prefix":"And","index":6,"text":"header X-Correlation-ID = correlationId"}},{"result":{"nanos":0,"startTime":1744301474384,"endTime":1744301474384,"millis":0.0,"status":"skipped"},"step":{"line":444,"prefix":"When","index":7,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474384,"endTime":1744301474384,"millis":0.0,"status":"skipped"},"step":{"line":445,"prefix":"Then","index":8,"text":"status 500"}},{"result":{"nanos":0,"startTime":1744301474384,"endTime":1744301474384,"millis":0.0,"status":"skipped"},"step":{"line":446,"prefix":"And","index":9,"text":"match response.requestId == correlationId"}}],"line":432,"description":"","durationMillis":5.094688,"failed":true,"error":"http call failed after 2 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/correlated-error\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:435","executorName":"main","name":"Error correlation IDs are maintained across calls","startTime":1744301474377,"refId":"[9:432]","endTime":1744301474384,"exampleIndex":-1},{"sectionIndex":9,"stepResults":[{"result":{"nanos":57815,"startTime":1744301474388,"endTime":1744301474388,"millis":0.057815,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":89094,"startTime":1744301474388,"endTime":1744301474388,"millis":0.089094,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":52162,"startTime":1744301474388,"endTime":1744301474388,"millis":0.052162,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":112986,"startTime":1744301474388,"endTime":1744301474388,"millis":0.112986,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":106056,"startTime":1744301474389,"endTime":1744301474389,"millis":0.106056,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":74686,"startTime":1744301474389,"endTime":1744301474389,"millis":0.074686,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":73683,"startTime":1744301474389,"endTime":1744301474389,"millis":0.073683,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":86814,"startTime":1744301474389,"endTime":1744301474389,"millis":0.086814,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":67573,"startTime":1744301474389,"endTime":1744301474389,"millis":0.067573,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":61919,"startTime":1744301474389,"endTime":1744301474389,"millis":0.061919,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":62284,"startTime":1744301474389,"endTime":1744301474389,"millis":0.062284,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":62831,"startTime":1744301474389,"endTime":1744301474389,"millis":0.062831,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":93288,"startTime":1744301474389,"endTime":1744301474389,"millis":0.093288,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":99581,"startTime":1744301474389,"endTime":1744301474389,"millis":0.099581,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":82619,"startTime":1744301474389,"endTime":1744301474389,"millis":0.082619,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":553989,"startTime":1744301474389,"endTime":1744301474390,"millis":0.553989,"status":"passed"},"step":{"line":450,"prefix":"Given","index":0,"text":"url apiBaseUrl + zephyrBasePath + '\/test-cases\/batch-partial'"}},{"result":{"nanos":212203,"startTime":1744301474390,"endTime":1744301474390,"millis":0.212203,"status":"passed"},"step":{"endLine":458,"line":451,"prefix":"And","docString":"[\n  { \"name\": \"Valid Test Case 1\" },\n  { },\n  { \"name\": \"Valid Test Case 2\" }\n]","index":1,"text":"request"}},{"result":{"nanos":2666987,"errorMessage":"http call failed after 2 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/test-cases\/batch-partial\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:459","startTime":1744301474390,"endTime":1744301474393,"millis":2.666987,"status":"failed"},"step":{"line":459,"prefix":"When","index":2,"text":"method POST"}},{"result":{"nanos":0,"startTime":1744301474393,"endTime":1744301474393,"millis":0.0,"status":"skipped"},"step":{"line":460,"prefix":"Then","index":3,"text":"status 207"}},{"result":{"nanos":0,"startTime":1744301474393,"endTime":1744301474393,"millis":0.0,"status":"skipped"},"step":{"line":461,"prefix":"And","index":4,"text":"match response.results[0].status == 201"}},{"result":{"nanos":0,"startTime":1744301474393,"endTime":1744301474393,"millis":0.0,"status":"skipped"},"step":{"line":462,"prefix":"And","index":5,"text":"match response.results[1].status == 400"}},{"result":{"nanos":0,"startTime":1744301474393,"endTime":1744301474393,"millis":0.0,"status":"skipped"},"step":{"line":463,"prefix":"And","index":6,"text":"match response.results[1].error != null"}},{"result":{"nanos":0,"startTime":1744301474393,"endTime":1744301474393,"millis":0.0,"status":"skipped"},"step":{"line":464,"prefix":"And","index":7,"text":"match response.results[2].status == 201"}},{"result":{"nanos":0,"startTime":1744301474393,"endTime":1744301474393,"millis":0.0,"status":"skipped"},"step":{"comments":["# Verify qTest behaves the same way"],"line":467,"prefix":"Given","index":8,"text":"url apiBaseUrl + qtestBasePath + '\/test-cases\/batch-partial'"}},{"result":{"nanos":0,"startTime":1744301474393,"endTime":1744301474393,"millis":0.0,"status":"skipped"},"step":{"endLine":475,"line":468,"prefix":"And","docString":"[\n  { \"name\": \"Valid Test Case 1\" },\n  { },\n  { \"name\": \"Valid Test Case 2\" }\n]","index":9,"text":"request"}},{"result":{"nanos":0,"startTime":1744301474393,"endTime":1744301474393,"millis":0.0,"status":"skipped"},"step":{"line":476,"prefix":"When","index":10,"text":"method POST"}},{"result":{"nanos":0,"startTime":1744301474393,"endTime":1744301474393,"millis":0.0,"status":"skipped"},"step":{"line":477,"prefix":"Then","index":11,"text":"status 207"}},{"result":{"nanos":0,"startTime":1744301474393,"endTime":1744301474393,"millis":0.0,"status":"skipped"},"step":{"line":478,"prefix":"And","index":12,"text":"match response.results[0].status == 201"}},{"result":{"nanos":0,"startTime":1744301474393,"endTime":1744301474393,"millis":0.0,"status":"skipped"},"step":{"line":479,"prefix":"And","index":13,"text":"match response.results[1].status == 400"}},{"result":{"nanos":0,"startTime":1744301474393,"endTime":1744301474393,"millis":0.0,"status":"skipped"},"step":{"line":480,"prefix":"And","index":14,"text":"match response.results[1].error != null"}},{"result":{"nanos":0,"startTime":1744301474393,"endTime":1744301474393,"millis":0.0,"status":"skipped"},"step":{"line":481,"prefix":"And","index":15,"text":"match response.results[2].status == 201"}}],"line":449,"description":"","durationMillis":4.61657,"failed":true,"error":"http call failed after 2 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/test-cases\/batch-partial\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:459","executorName":"main","name":"Batch operations properly handle partial success","startTime":1744301474387,"refId":"[10:449]","endTime":1744301474393,"exampleIndex":-1},{"sectionIndex":10,"stepResults":[{"result":{"nanos":75598,"startTime":1744301474398,"endTime":1744301474398,"millis":0.075598,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":112986,"startTime":1744301474398,"endTime":1744301474398,"millis":0.112986,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":58545,"startTime":1744301474398,"endTime":1744301474398,"millis":0.058545,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":120555,"startTime":1744301474398,"endTime":1744301474398,"millis":0.120555,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":79884,"startTime":1744301474399,"endTime":1744301474399,"millis":0.079884,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":116542,"startTime":1744301474399,"endTime":1744301474399,"millis":0.116542,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":109704,"startTime":1744301474399,"endTime":1744301474399,"millis":0.109704,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":77057,"startTime":1744301474399,"endTime":1744301474399,"millis":0.077057,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":139887,"startTime":1744301474399,"endTime":1744301474399,"millis":0.139887,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":68850,"startTime":1744301474399,"endTime":1744301474399,"millis":0.06885,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":62101,"startTime":1744301474399,"endTime":1744301474399,"millis":0.062101,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":59821,"startTime":1744301474399,"endTime":1744301474399,"millis":0.059821,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":62011,"startTime":1744301474399,"endTime":1744301474399,"millis":0.062011,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":83441,"startTime":1744301474400,"endTime":1744301474400,"millis":0.083441,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":64746,"startTime":1744301474400,"endTime":1744301474400,"millis":0.064746,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":660865,"startTime":1744301474400,"endTime":1744301474401,"millis":0.660865,"status":"passed"},"step":{"comments":["# Zephyr uses specific error codes that should be normalized"],"line":486,"prefix":"Given","index":0,"text":"url apiBaseUrl + zephyrBasePath + '\/provider-specific-error'"}},{"result":{"nanos":1345530,"errorMessage":"http call failed after 1 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/provider-specific-error\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:487","startTime":1744301474400,"endTime":1744301474401,"millis":1.34553,"status":"failed"},"step":{"line":487,"prefix":"When","index":1,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474402,"endTime":1744301474402,"millis":0.0,"status":"skipped"},"step":{"line":488,"prefix":"Then","index":2,"text":"status 400"}},{"result":{"nanos":0,"startTime":1744301474402,"endTime":1744301474402,"millis":0.0,"status":"skipped"},"step":{"line":489,"prefix":"And","index":3,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301474402,"endTime":1744301474402,"millis":0.0,"status":"skipped"},"step":{"line":490,"prefix":"And","index":4,"text":"match response.code == 'VALIDATION_ERROR'  # Normalized code"}},{"result":{"nanos":0,"startTime":1744301474402,"endTime":1744301474402,"millis":0.0,"status":"skipped"},"step":{"comments":["# qTest uses different error codes for the same concept"],"line":493,"prefix":"Given","index":5,"text":"url apiBaseUrl + qtestBasePath + '\/provider-specific-error'"}},{"result":{"nanos":0,"startTime":1744301474402,"endTime":1744301474402,"millis":0.0,"status":"skipped"},"step":{"line":494,"prefix":"When","index":6,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474402,"endTime":1744301474402,"millis":0.0,"status":"skipped"},"step":{"line":495,"prefix":"Then","index":7,"text":"status 400"}},{"result":{"nanos":0,"startTime":1744301474402,"endTime":1744301474402,"millis":0.0,"status":"skipped"},"step":{"line":496,"prefix":"And","index":8,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301474402,"endTime":1744301474402,"millis":0.0,"status":"skipped"},"step":{"line":497,"prefix":"And","index":9,"text":"match response.code == 'VALIDATION_ERROR'  # Same normalized code"}},{"result":{"nanos":0,"startTime":1744301474402,"endTime":1744301474402,"millis":0.0,"status":"skipped"},"step":{"comments":["# Test another error type normalization"],"line":500,"prefix":"Given","index":10,"text":"url apiBaseUrl + zephyrBasePath + '\/provider-specific-auth-error'"}},{"result":{"nanos":0,"startTime":1744301474402,"endTime":1744301474402,"millis":0.0,"status":"skipped"},"step":{"line":501,"prefix":"When","index":11,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474402,"endTime":1744301474402,"millis":0.0,"status":"skipped"},"step":{"line":502,"prefix":"Then","index":12,"text":"status 401"}},{"result":{"nanos":0,"startTime":1744301474402,"endTime":1744301474402,"millis":0.0,"status":"skipped"},"step":{"line":503,"prefix":"And","index":13,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301474402,"endTime":1744301474402,"millis":0.0,"status":"skipped"},"step":{"line":504,"prefix":"And","index":14,"text":"match response.code == 'UNAUTHORIZED'  # Normalized code"}},{"result":{"nanos":0,"startTime":1744301474402,"endTime":1744301474402,"millis":0.0,"status":"skipped"},"step":{"line":506,"prefix":"Given","index":15,"text":"url apiBaseUrl + qtestBasePath + '\/provider-specific-auth-error'"}},{"result":{"nanos":0,"startTime":1744301474402,"endTime":1744301474402,"millis":0.0,"status":"skipped"},"step":{"line":507,"prefix":"When","index":16,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474402,"endTime":1744301474402,"millis":0.0,"status":"skipped"},"step":{"line":508,"prefix":"Then","index":17,"text":"status 401"}},{"result":{"nanos":0,"startTime":1744301474402,"endTime":1744301474402,"millis":0.0,"status":"skipped"},"step":{"line":509,"prefix":"And","index":18,"text":"match response == standardErrorSchema"}},{"result":{"nanos":0,"startTime":1744301474402,"endTime":1744301474402,"millis":0.0,"status":"skipped"},"step":{"line":510,"prefix":"And","index":19,"text":"match response.code == 'UNAUTHORIZED'  # Same normalized code"}}],"line":484,"description":"","durationMillis":3.298123,"failed":true,"error":"http call failed after 1 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/provider-specific-error\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:487","executorName":"main","name":"Provider-specific error codes are normalized to standard error codes","startTime":1744301474397,"refId":"[11:484]","endTime":1744301474402,"exampleIndex":-1},{"sectionIndex":11,"stepResults":[{"result":{"nanos":40033,"startTime":1744301474406,"endTime":1744301474406,"millis":0.040033,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":0,"text":"url apiBaseUrl"}},{"result":{"nanos":69943,"startTime":1744301474406,"endTime":1744301474406,"millis":0.069943,"status":"passed"},"step":{"background":true,"line":7,"prefix":"*","index":1,"text":"def zephyrBasePath = '\/api\/zephyr'"}},{"result":{"nanos":145086,"startTime":1744301474406,"endTime":1744301474406,"millis":0.145086,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":2,"text":"def qtestBasePath = '\/api\/qtest'"}},{"result":{"nanos":187854,"startTime":1744301474406,"endTime":1744301474406,"millis":0.187854,"status":"passed"},"step":{"endLine":22,"comments":["# Schema for the standard error format we expect from our error handler"],"background":true,"line":11,"prefix":"*","docString":"{\n  error: '#string',\n  code: '##string',\n  service: '#string',\n  operation: '##string',\n  timestamp: '##string',\n  details: '##object',\n  requestId: '##string'\n}","index":3,"text":"def standardErrorSchema ="}},{"result":{"nanos":76966,"startTime":1744301474406,"endTime":1744301474406,"millis":0.076966,"status":"passed"},"step":{"endLine":33,"comments":["# Helper functions to simulate different error conditions"],"background":true,"line":25,"prefix":"*","docString":"function() {\n  return { \n    url: 'https:\/\/non-existent-domain-for-testing.example',\n    method: 'GET'\n  };\n}","index":4,"text":"def simulateNetworkError ="}},{"result":{"nanos":98487,"startTime":1744301474406,"endTime":1744301474406,"millis":0.098487,"status":"passed"},"step":{"endLine":50,"background":true,"line":35,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return { \n      url: apiBaseUrl + zephyrBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  } else {\n    return { \n      url: apiBaseUrl + qtestBasePath + '\/simulate-timeout',\n      method: 'GET'\n    };\n  }\n}","index":5,"text":"def simulateTimeoutError ="}},{"result":{"nanos":95660,"startTime":1744301474407,"endTime":1744301474407,"millis":0.09566,"status":"passed"},"step":{"endLine":69,"background":true,"line":52,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/auth',\n      method: 'POST',\n      body: { apiToken: 'invalid-token' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/auth',\n      method: 'POST',\n      body: { username: 'invalid', password: 'invalid' }\n    };\n  }\n}","index":6,"text":"def simulateAuthError ="}},{"result":{"nanos":73956,"startTime":1744301474407,"endTime":1744301474407,"millis":0.073956,"status":"passed"},"step":{"endLine":88,"background":true,"line":71,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/secured-resource',\n      method: 'GET',\n      headers: { 'Authorization': 'Bearer valid-but-insufficient-permissions' }\n    };\n  }\n}","index":7,"text":"def simulateAuthorizationError ="}},{"result":{"nanos":118641,"startTime":1744301474407,"endTime":1744301474407,"millis":0.118641,"status":"passed"},"step":{"endLine":107,"background":true,"line":90,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases',\n      method: 'POST',\n      body: { \/* missing required name field *\/ }\n    };\n  }\n}","index":8,"text":"def simulateValidationError ="}},{"result":{"nanos":69579,"startTime":1744301474407,"endTime":1744301474407,"millis":0.069579,"status":"passed"},"step":{"endLine":124,"background":true,"line":109,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/non-existent-id',\n      method: 'GET'\n    };\n  }\n}","index":9,"text":"def simulateNotFoundError ="}},{"result":{"nanos":94292,"startTime":1744301474407,"endTime":1744301474407,"millis":0.094292,"status":"passed"},"step":{"endLine":141,"background":true,"line":126,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-server-error',\n      method: 'GET'\n    };\n  }\n}","index":10,"text":"def simulateServerError ="}},{"result":{"nanos":68576,"startTime":1744301474407,"endTime":1744301474407,"millis":0.068576,"status":"passed"},"step":{"endLine":158,"background":true,"line":143,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/simulate-rate-limit',\n      method: 'GET'\n    };\n  }\n}","index":11,"text":"def simulateRateLimitError ="}},{"result":{"nanos":115083,"startTime":1744301474407,"endTime":1744301474407,"millis":0.115083,"status":"passed"},"step":{"endLine":177,"background":true,"line":160,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/conflict',\n      method: 'PUT',\n      body: { name: 'Conflicting Test Case', version: 'outdated-version' }\n    };\n  }\n}","index":12,"text":"def simulateConflictError ="}},{"result":{"nanos":78242,"startTime":1744301474407,"endTime":1744301474407,"millis":0.078242,"status":"passed"},"step":{"endLine":196,"background":true,"line":179,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/complex-validation',\n      method: 'POST',\n      body: { name: 'Invalid Test Case', status: 'INVALID_STATUS' }\n    };\n  }\n}","index":13,"text":"def simulateUnprocessableEntityError ="}},{"result":{"nanos":154752,"startTime":1744301474407,"endTime":1744301474407,"millis":0.154752,"status":"passed"},"step":{"endLine":223,"background":true,"line":198,"prefix":"*","docString":"function(provider) {\n  if (provider === 'zephyr') {\n    return {\n      url: apiBaseUrl + zephyrBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  } else {\n    return {\n      url: apiBaseUrl + qtestBasePath + '\/test-cases\/batch',\n      method: 'POST',\n      body: [\n        { name: 'Valid Test Case 1' },\n        { \/* missing name *\/ },\n        { name: 'Valid Test Case 2' }\n      ]\n    };\n  }\n}","index":14,"text":"def simulateBatchOperationError ="}},{"result":{"nanos":657126,"startTime":1744301474408,"endTime":1744301474409,"millis":0.657126,"status":"passed"},"step":{"line":514,"prefix":"Given","index":0,"text":"url apiBaseUrl + zephyrBasePath + '\/with-fallback'"}},{"result":{"nanos":1239019,"errorMessage":"http call failed after 1 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/with-fallback\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:515","startTime":1744301474408,"endTime":1744301474409,"millis":1.239019,"status":"failed"},"step":{"line":515,"prefix":"When","index":1,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474410,"endTime":1744301474410,"millis":0.0,"status":"skipped"},"step":{"line":516,"prefix":"Then","index":2,"text":"status 200"}},{"result":{"nanos":0,"startTime":1744301474410,"endTime":1744301474410,"millis":0.0,"status":"skipped"},"step":{"line":517,"prefix":"And","index":3,"text":"match response.usedFallback == true"}},{"result":{"nanos":0,"startTime":1744301474410,"endTime":1744301474410,"millis":0.0,"status":"skipped"},"step":{"line":518,"prefix":"And","index":4,"text":"match response.message contains 'fallback'"}},{"result":{"nanos":0,"startTime":1744301474410,"endTime":1744301474410,"millis":0.0,"status":"skipped"},"step":{"line":520,"prefix":"Given","index":5,"text":"url apiBaseUrl + qtestBasePath + '\/with-fallback'"}},{"result":{"nanos":0,"startTime":1744301474410,"endTime":1744301474410,"millis":0.0,"status":"skipped"},"step":{"line":521,"prefix":"When","index":6,"text":"method GET"}},{"result":{"nanos":0,"startTime":1744301474410,"endTime":1744301474410,"millis":0.0,"status":"skipped"},"step":{"line":522,"prefix":"Then","index":7,"text":"status 200"}},{"result":{"nanos":0,"startTime":1744301474410,"endTime":1744301474410,"millis":0.0,"status":"skipped"},"step":{"line":523,"prefix":"And","index":8,"text":"match response.usedFallback == true"}},{"result":{"nanos":0,"startTime":1744301474410,"endTime":1744301474410,"millis":0.0,"status":"skipped"},"step":{"line":524,"prefix":"And","index":9,"text":"match response.message contains 'fallback'"}}],"line":513,"description":"","durationMillis":3.383295,"failed":true,"error":"http call failed after 1 milliseconds for url: http:\/\/localhost:8080\/api\/api\/zephyr\/with-fallback\norg.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost\/127.0.0.1] failed: Connection refused\nclasspath:org\/skidbladnir\/contracts\/provider-error-handling.feature:515","executorName":"main","name":"Fallback mechanism is triggered when primary operation fails","startTime":1744301474405,"refId":"[12:513]","endTime":1744301474410,"exampleIndex":-1}],"callDepth":0,"name":"Provider Error Handling Patterns","description":"This feature validates the consistent error handling patterns across different providers.\n  It tests that error messages, formatting, and recovery follow the same patterns regardless of the provider.","resultDate":"2025-04-10 12:11:14 PM","durationMillis":475.427443,"passedCount":0}