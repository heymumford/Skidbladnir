version: '3'

# Taskfile for the Skidbladnir project
# Run with 'task <taskname>'
# Install task: https://taskfile.dev

vars:
  PROJECT_ROOT:
    sh: pwd
  BUILD_TIMESTAMP:
    sh: date +%Y%m%d%H%M%S
  BUILD_ID: "build-{{.BUILD_TIMESTAMP}}"
  DEFAULT_ENV: dev

env:
  NODE_ENV: development

tasks:
  default:
    cmds:
      - task: help

  help:
    desc: Show help information
    cmds:
      - echo "Skidbladnir Task Runner"
      - echo ""
      - echo "Available tasks:"
      - echo "  task setup             # Install all development dependencies"
      - echo "  task build             # Build all components"
      - echo "  task build:ts          # Build TypeScript components"
      - echo "  task build:py          # Build Python components"
      - echo "  task build:go          # Build Go components"
      - echo "  task test              # Run all tests"
      - echo "  task test:ts           # Run TypeScript tests"
      - echo "  task test:py           # Run Python tests"
      - echo "  task test:go           # Run Go tests"
      - echo "  task test:cross-component # Run cross-component tests"
      - echo "  task lint              # Run all linters"
      - echo "  task lint:ts           # Run TypeScript linters"
      - echo "  task lint:py           # Run Python linters"
      - echo "  task lint:go           # Run Go linters"
      - echo "  task serve             # Start all development servers"
      - echo "  task serve:api         # Start the API server"
      - echo "  task serve:orchestrator # Start the orchestrator"
      - echo "  task serve:binary      # Start the binary processor"
      - echo "  task containers:build   # Build all containers"
      - echo "  task containers:up      # Start all containers"
      - echo "  task containers:down    # Stop all containers"
      - echo "  task deploy:qa         # Deploy to QA environment"
      - echo "  task deploy:prod       # Deploy to production environment"
      - echo ""
      - echo "Examples:"
      - echo "  task build ENV=prod    # Build for production environment"
      - echo "  task test:py           # Run Python tests only"

  setup:
    desc: Install all development dependencies
    cmds:
      - npm install
      - poetry install
      - go mod download
    env:
      GOFLAGS: "-mod=mod"

  build:
    desc: Build all components
    deps: [build:ts, build:py, build:go]
    summary: |
      Build all Skidbladnir components (TypeScript, Python, Go)
      
      Examples:
        task build ENV=prod    # Build for production environment
        task build             # Build for development environment

  build:ts:
    desc: Build TypeScript components
    cmds:
      - npm run build
    sources:
      - packages/*/typescript/**/*.ts
      - internal/typescript/**/*.ts
      - cmd/api/**/*.ts
    generates:
      - dist/**/*.js

  build:py:
    desc: Build Python components
    cmds:
      - poetry build
    sources:
      - packages/*/python/**/*.py
      - internal/python/**/*.py
      - cmd/orchestrator/**/*.py
    generates:
      - dist/**/*.whl

  build:go:
    desc: Build Go components
    cmds:
      - go build -o dist/binary-processor ./cmd/binary-processor
    sources:
      - packages/*/go/**/*.go
      - internal/go/**/*.go
      - cmd/binary-processor/**/*.go
    generates:
      - dist/binary-processor
    env:
      GOFLAGS: "-mod=mod"
      CGO_ENABLED: "0"

  test:
    desc: Run all tests
    deps: [test:ts, test:py, test:go]

  test:ts:
    desc: Run TypeScript tests
    cmds:
      - npm test
    sources:
      - packages/*/typescript/**/*.ts
      - internal/typescript/**/*.ts
      - tests/**/*.test.ts

  test:py:
    desc: Run Python tests
    cmds:
      - poetry run pytest tests/python

  test:go:
    desc: Run Go tests
    cmds:
      - go test -v ./tests/go/...
    env:
      GOFLAGS: "-mod=mod"
      
  test:cross-component:
    desc: Run cross-component tests
    cmds:
      - npm run test:api:cross-component

  lint:
    desc: Run all linters
    deps: [lint:ts, lint:py, lint:go]

  lint:ts:
    desc: Run TypeScript linters
    cmds:
      - npm run lint

  lint:py:
    desc: Run Python linters
    cmds:
      - poetry run flake8 packages/*/python internal/python cmd/orchestrator
      - poetry run black --check packages/*/python internal/python cmd/orchestrator
      - poetry run isort --check packages/*/python internal/python cmd/orchestrator

  lint:go:
    desc: Run Go linters
    cmds:
      - go vet ./packages/*/go/... ./internal/go/... ./cmd/binary-processor/...
      - |
        if command -v golangci-lint > /dev/null; then
          golangci-lint run ./packages/*/go/... ./internal/go/... ./cmd/binary-processor/...
        else
          echo "golangci-lint not found, skipping"
        fi
    env:
      GOFLAGS: "-mod=mod"

  serve:
    desc: Start all development servers
    cmds:
      - task: serve:api
      - task: serve:orchestrator
      - task: serve:binary

  serve:api:
    desc: Start the API server
    cmds:
      - npm run dev:api
    ignore_error: true

  serve:orchestrator:
    desc: Start the orchestrator
    cmds:
      - poetry run python cmd/orchestrator/main.py
    ignore_error: true

  serve:binary:
    desc: Start the binary processor
    cmds:
      - go run cmd/binary-processor/main.go
    ignore_error: true
    env:
      GOFLAGS: "-mod=mod"

  containers:build:
    desc: Build all containers
    cmds:
      - docker-compose -f infra/compose/docker-compose.{{.ENV}}.yml build
    vars:
      ENV: '{{default .DEFAULT_ENV .ENV}}'

  containers:up:
    desc: Start all containers
    cmds:
      - docker-compose -f infra/compose/docker-compose.{{.ENV}}.yml up -d
    vars:
      ENV: '{{default .DEFAULT_ENV .ENV}}'

  containers:down:
    desc: Stop all containers
    cmds:
      - docker-compose -f infra/compose/docker-compose.{{.ENV}}.yml down
    vars:
      ENV: '{{default .DEFAULT_ENV .ENV}}'

  deploy:qa:
    desc: Deploy to QA environment
    cmds:
      - ./scripts/build-orchestrator.sh --env qa
    sources:
      - dist/**/*

  deploy:prod:
    desc: Deploy to production environment
    cmds:
      - ./scripts/build-orchestrator.sh --env prod
    sources:
      - dist/**/*

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf dist
      - rm -rf .task
      - rm -rf node_modules/.cache
      - rm -rf .pytest_cache
      - find . -name __pycache__ -type d -exec rm -rf {} +