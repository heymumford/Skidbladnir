version: '3.8'

# Laptop-friendly production configuration for Skidbladnir
# Optimized for Windows 10/11 with 16GB RAM, 4-core CPU

services:
  # API Service with memory constraints
  api:
    image: ${REGISTRY_URL:-localhost:5000}/testbridge/api:${VERSION:-latest}
    build:
      context: ../../
      dockerfile: infra/prod/api-laptop.Dockerfile
    depends_on:
      - postgres
      - redis
      - minio
    ports:
      - "8080:8080"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://testbridge:testbridge@postgres:5432/testbridge
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: testbridge
      MINIO_SECRET_KEY: testbridge
      MINIO_USE_SSL: "false"
      NODE_OPTIONS: "--max-old-space-size=256"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Orchestration Service with memory constraints
  orchestrator:
    image: ${REGISTRY_URL:-localhost:5000}/testbridge/orchestrator:${VERSION:-latest}
    depends_on:
      - postgres
      - redis
      - minio
    ports:
      - "8000:8000"
    environment:
      ENVIRONMENT: production
      DATABASE_URL: postgresql://testbridge:testbridge@postgres:5432/testbridge
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: testbridge
      MINIO_SECRET_KEY: testbridge
      MINIO_USE_SSL: "false"
      # Python memory restrictions
      PYTHONMALLOC: malloc
      PYTHONFAULTHANDLER: 1
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Binary Processor Service with constrained memory
  binary-processor:
    image: ${REGISTRY_URL:-localhost:5000}/testbridge/binary-processor:${VERSION:-latest}
    depends_on:
      - minio
    ports:
      - "8090:8090"
    environment:
      ENVIRONMENT: production
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: testbridge
      MINIO_SECRET_KEY: testbridge
      MINIO_USE_SSL: "false"
      # Go memory settings
      GOGC: 50
      GOMEMLIMIT: 256MiB
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.2'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LLM Advisor with memory optimization - only starts when needed (optional)
  llm-advisor:
    image: ${REGISTRY_URL:-localhost:5000}/testbridge/llm-advisor:${VERSION:-latest}
    build:
      context: ../../packages/llm-advisor
      dockerfile: Dockerfile
    ports:
      - "8765:8765"
    environment:
      MODEL_PATH: /models/llama-3-8b-q4
      QUANTIZATION: 4bit
      CONTEXT_SIZE: 2048
      MAX_BATCH_SIZE: 4
      # Memory optimization flags
      USE_MLOCK: 0
      LOW_MEMORY_MODE: 1
    volumes:
      - llm_models:/models
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    restart: on-failure
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8765/health"]
      interval: 60s
      timeout: 20s
      retries: 3
    profiles:
      - llm
      - full

  # PostgreSQL for state tracking - with memory limits
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_PASSWORD: testbridge
      POSTGRES_USER: testbridge
      POSTGRES_DB: testbridge
      # PostgreSQL memory optimization
      POSTGRES_SHARED_BUFFERS: 128MB
      POSTGRES_WORK_MEM: 16MB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 256MB
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testbridge"]
      interval: 20s
      timeout: 5s
      retries: 3

  # Redis for caching - lightweight configuration
  redis:
    image: redis:7-alpine
    command: redis-server --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 20s
      timeout: 5s
      retries: 3

  # MinIO for object storage - reduced resource usage
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: testbridge
      MINIO_ROOT_PASSWORD: testbridge
    command: server /data --quiet
    volumes:
      - minio_data:/data
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  minio_data:
  llm_models:

# Usage: 
# To start minimal environment:
# docker-compose -f docker-compose-laptop.yml up -d
#
# To start with LLM support:
# docker-compose -f docker-compose-laptop.yml --profile llm up -d